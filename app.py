import os
import json
import re
import smtplib
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
from email.mime.text import MIMEText
from thefuzz import process, fuzz
import logging
import openai

# –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ city_forms.py –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ—Ä—É—á —ñ –º—ñ—Å—Ç–∏—Ç—å CITY_FORMS
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥, CITY_FORMS = {"–∫–∏—ó–≤": ["–∫–∏—ó–≤", "kiev", "kyiv"], ...}
try:
    from city_forms import CITY_FORMS
except ImportError:
    logging.warning("–§–∞–π–ª city_forms.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ CITY_FORMS –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º—ñ—Å—Ç –º–æ–∂–µ –±—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω–∏–º.")
    CITY_FORMS = {}


app = Flask(__name__)
CORS(app, resources={r"/chat": {"origins": [
    "https://bus-timel.com.ua",
    "http://localhost:8080" # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
]}})

logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
sessions = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
try:
    with open("routes.json", encoding="utf-8") as f:
        data = json.load(f)
        routes_data = data["routes"] # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –≤ routes_data, —â–æ–± –Ω–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞—Ç–∏ –∑ –º–æ–¥—É–ª–µ–º routes
except FileNotFoundError:
    logging.error("‚ùå –§–∞–π–ª routes.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    routes_data = []
except json.JSONDecodeError as e:
    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è routes.json: {e}")
    routes_data = []
except Exception as e:
    logging.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
    routes_data = []

if not routes_data:
    logging.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë–æ—Ç –Ω–µ –∑–º–æ–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏.")

def normalize(text):
    if not isinstance(text, str):
        return ""
    return re.sub(r"[‚Äô']", "", text.lower()).strip()

def match_city(word_to_match):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–∑–æ–≤—É —Ñ–æ—Ä–º—É –º—ñ—Å—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Å–ª–æ–≤–∞."""
    norm_word = normalize(word_to_match)
    if not norm_word:
        return None

    for base_form, forms_list in CITY_FORMS.items():
        if norm_word in [normalize(f) for f in forms_list]:
            return base_form
    
    # –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fuzzy matching
    # (–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ CITY_FORMS.keys() –º—ñ—Å—Ç–∏—Ç—å —Å–∞–º–µ –±–∞–∑–æ–≤—ñ —Ñ–æ—Ä–º–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)
    # –ö—Ä–∞—â–µ –º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –±–∞–∑–æ–≤–∏—Ö —Ñ–æ—Ä–º –æ–∫—Ä–µ–º–æ –¥–ª—è process.extractOne
    all_base_city_forms = list(CITY_FORMS.keys())
    if not all_base_city_forms: # –Ø–∫—â–æ CITY_FORMS –ø–æ—Ä–æ–∂–Ω—ñ–π
        return None

    result = process.extractOne(norm_word, all_base_city_forms, scorer=fuzz.WRatio, score_cutoff=80) # WRatio —á–∞—Å—Ç–æ –¥–∞—î –∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    return result[0] if result else None


def extract_cities_from_text(text):
    """–í–∏—Ç—è–≥—É—î –¥–æ –¥–≤–æ—Ö –º—ñ—Å—Ç –∑ —Ç–µ–∫—Å—Ç—É."""
    norm_text = normalize(text)
    words = norm_text.split()
    found_cities = []
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–∞, —â–æ —Å–∫–ª–∞–¥–∞—é—Ç—å—Å—è –∑ –∫—ñ–ª—å–∫–æ—Ö —Å–ª—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —ó—Ö —É CITY_FORMS)
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "–ë—ñ–ª–∞ –¶–µ—Ä–∫–≤–∞"
    # –¶—è —á–∞—Å—Ç–∏–Ω–∞ –ø–æ—Ç—Ä–µ–±—É—î –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–æ–≥–æ NLU, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –ø–æ–∫–∏ —â–æ –∑–∞–ª–∏—à–∏–º–æ –ø–æ—à—É–∫ –ø–æ —Å–ª–æ–≤–∞—Ö
    
    for word in words:
        city = match_city(word)
        if city and city not in found_cities:
            found_cities.append(city)
            if len(found_cities) == 2:
                break
    return found_cities # –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±–∞–∑–æ–≤–∏—Ö —Ñ–æ—Ä–º –º—ñ—Å—Ç

def find_route_segments(user_start_city_norm, user_end_city_norm):
    """
    –®—É–∫–∞—î —Å–µ–≥–º–µ–Ω—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤.
    """
    found_segments = []
    for route_entry in routes_data: # route_entry —Ü–µ –æ–¥–∏–Ω –æ–±'—î–∫—Ç –º–∞—Ä—à—Ä—É—Ç—É –∑ routes.json
        stops = route_entry.get("stops", [])
        if not stops:
            continue

        stop_cities_uk_norm = [normalize(s.get("city", {}).get("uk")) for s in stops]

        try:
            start_index_in_route = stop_cities_uk_norm.index(user_start_city_norm)
            end_index_in_route = stop_cities_uk_norm.index(user_end_city_norm)

            if start_index_in_route < end_index_in_route:
                # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç —î —Å–µ–≥–º–µ–Ω—Ç–æ–º —Ü—å–æ–≥–æ —Ä–µ–π—Å—É
                departure_stop_info = stops[start_index_in_route]
                arrival_stop_info = stops[end_index_in_route]

                segment_detail = {
                    "route_name_uk": route_entry.get("route_name", {}).get("uk", "N/A"),
                    "price": route_entry.get("price", "—É—Ç–æ—á–Ω—é–π—Ç–µ"),
                    "frequency": route_entry.get("frequency", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"),
                    "url_slug": route_entry.get("url_slug"),
                    "departure_city_uk": departure_stop_info.get("city", {}).get("uk", user_start_city_norm.capitalize()),
                    "departure_time": departure_stop_info.get("time", "N/A"),
                    "departure_address_uk": departure_stop_info.get("address", {}).get("uk", ""),
                    "arrival_city_uk": arrival_stop_info.get("city", {}).get("uk", user_end_city_norm.capitalize()),
                    "arrival_time": arrival_stop_info.get("time", "N/A"),
                    "arrival_address_uk": arrival_stop_info.get("address", {}).get("uk", ""),
                    "original_route_data": route_entry # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è slug
                }
                found_segments.append(segment_detail)
        except ValueError:
            # –û–¥–∏–Ω —ñ–∑ –º—ñ—Å—Ç (–∞–±–æ –æ–±–∏–¥–≤–∞) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ü—å–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–π—Å—ñ
            continue
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –º–∞—Ä—à—Ä—É—Ç—É {route_entry.get('route_name', {}).get('uk', 'N/A')}: {e}")
            continue
            
    return found_segments


def send_email(name, phone, start, end, date_str=None, route_name_str=""):
    """–ù–∞–¥—Å–∏–ª–∞—î email —ñ–∑ –∑–∞—è–≤–∫–æ—é."""
    email_user = os.environ.get("EMAIL_USER")
    email_pass = os.environ.get("EMAIL_PASS")
    recipient_email = "bustimelll@gmail.com" # –í–∞—à email

    if not email_user or not email_pass:
        logging.error("‚ùå Email credentials (EMAIL_USER, EMAIL_PASS) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return False

    subject = f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É Bus-Timel: {start} - {end}"
    body = (f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n"
            f"–Ü–º‚Äô—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {start.capitalize()} ‚Üí {end.capitalize()}\n")
    if route_name_str:
        body += f"–ù–∞–∑–≤–∞ —Ä–µ–π—Å—É: {route_name_str}\n"
    body += f"–î–∞—Ç–∞: {date_str or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}"


    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = email_user
    msg["To"] = recipient_email

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(email_user, email_pass)
            server.send_message(msg)
        logging.info(f"‚úÖ Email –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏: {name}, {phone}, {start}-{end}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è Email: {e}")
        return False

def gpt_reply(prompt_text, session_id="default"):
    """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT."""
    openai_api_key = os.environ.get("OPENAI_API_KEY")
    if not openai_api_key:
        logging.error("‚ùå –ö–ª—é—á API OpenAI (OPENAI_API_KEY) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É –ø—ñ–∑–Ω—ñ—à–µ. üôè"

    openai.api_key = openai_api_key
    
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    # history = sessions.get(session_id, {}).get("chat_history", [])
    # messages_to_send = history + [{"role": "user", "content": prompt_text}]
    
    messages_to_send = [
        {"role": "system", "content": "–¢–∏ –≤–≤—ñ—á–ª–∏–≤–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–∞—Å–∞–∂–∏—Ä—Å—å–∫–∏—Ö –ø–µ—Ä–µ–≤–µ–∑–µ–Ω—å –∫–æ–º–ø–∞–Ω—ñ—ó Bus-Timel. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —á—ñ—Ç–∫–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞–π –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç–∏ –∞–±–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫."},
        {"role": "user", "content": prompt_text}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4", # –ê–±–æ "gpt-3.5-turbo", —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–µ–∫–æ–Ω–æ–º–∏—Ç–∏
            messages=messages_to_send,
            max_tokens=200
        )
        reply_content = response.choices[0].message["content"]
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        # sessions.setdefault(session_id, {}).setdefault("chat_history", []).append({"role": "assistant", "content": reply_content})
        return reply_content
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ GPT: {e}")
        return "–ù–∞ –∂–∞–ª—å, —è –∑–∞—Ä–∞–∑ –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—Ä–æ–±–ª–µ–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. üôè"

@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_message = data.get("message", "").strip()
    session_id = data.get("session_id", "default_session") # –í–∞–∂–ª–∏–≤–æ –º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π session_id

    if not user_message:
        return jsonify({"reply": "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ—Å—å."})

    logging.info(f"[{session_id}] –û—Ç—Ä–∏–º–∞–Ω–æ: {user_message}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–µ—Å—ñ—ó
    # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ greeted —Å–∫–∏–¥–∞—î—Ç—å—Å—è –¥–ª—è –Ω–æ–≤–∏—Ö —Å–µ—Å—ñ–π –∞–±–æ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    context = sessions.get(session_id, {"greeted": False, "confirm_pending": None, "booking_details": None, "partial_city": None, "chat_history": []})
    
    # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
    context.setdefault("chat_history", []).append({"role": "user", "content": user_message})

    user_message_norm = normalize(user_message)
    reply_text = ""

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    if context.get("booking_details") and context["booking_details"].get("pending_contact_info"):
        match_contact = re.match(r"(.+?)\s*(\+?\d{10,13})$", user_message.strip()) # –î–æ–∑–≤–æ–ª—è—î–º–æ –¥–æ 13 —Ü–∏—Ñ—Ä –¥–ª—è –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö
        if match_contact:
            name, phone = match_contact.groups()
            name = name.strip()
            booking_info = context["booking_details"]
            
            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è email
            email_sent = send_email(name, phone, booking_info["departure_city_uk"], booking_info["arrival_city_uk"], 
                                    date_str=booking_info.get("date_str", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"), 
                                    route_name_str=booking_info.get("route_name_uk", ""))
            
            if email_sent:
                reply_text = f"‚úÖ –î—è–∫—É—î–º–æ, {name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç {booking_info['departure_city_uk']} - {booking_info['arrival_city_uk']} –ø—Ä–∏–π–Ω—è—Ç–∞. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚òéÔ∏è"
                # –°–∫–∏–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
                sessions[session_id] = {"greeted": True, "chat_history": context["chat_history"]} # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é, –∞–ª–µ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
            else:
                reply_text = "–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É."
            return jsonify({"reply": reply_text})
        else:
            reply_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –û–ª–µ–≥ +380123456789"
            return jsonify({"reply": reply_text})

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
    if context.get("confirm_pending"):
        pending_details = context["confirm_pending"]["details"]
        if user_message_norm in ["—Ç–∞–∫", "–¥–∞", "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", "–ø—ñ–¥—Ö–æ–¥–∏—Ç—å"]:
            context["booking_details"] = {
                **pending_details, # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ –º–∞—Ä—à—Ä—É—Ç—É
                "pending_contact_info": True
            }
            context["confirm_pending"] = None # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            
            route_info_str = (
                f"üöå –ú–∞—Ä—à—Ä—É—Ç: {pending_details['departure_city_uk']} ‚Üí {pending_details['arrival_city_uk']} ({pending_details['route_name_uk']})\n"
                f"üí∞ –¶—ñ–Ω–∞: {pending_details['price']} –≥—Ä–Ω\n"
                f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞: {pending_details['frequency']}\n"
                f"‚è∞ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {pending_details['departure_city_uk']} ({pending_details.get('departure_address_uk', 'N/A')}): {pending_details['departure_time']}\n"
                f"üïì –ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {pending_details['arrival_city_uk']} ({pending_details.get('arrival_address_uk', 'N/A')}): {pending_details['arrival_time']}\n"
            )
            if pending_details.get("url_slug"):
                 route_info_str += f"üîó https://bus-timel.com.ua/routes/{pending_details['url_slug']}.html\n"
            
            reply_text = f"{route_info_str}–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –û–ª–µ–≥ +380XXXXXXXXX)."
            sessions[session_id] = context
            return jsonify({"reply": reply_text})
        
        elif user_message_norm in ["–Ω—ñ", "–Ω–µ—Ç", "—Å–∫–∞—Å—É–≤–∞—Ç–∏", "—ñ–Ω—à–∏–π", "–Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"]:
            # –Ø–∫—â–æ —î –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, –º–æ–∂–Ω–∞ —ó—Ö –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏
            if context["confirm_pending"].get("alternatives_count", 0) > 1:
                reply_text = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç—å —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É? –ê–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç."
            else:
                reply_text = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç —ñ–Ω–∞–∫—à–µ, –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å —ñ–Ω—à—ñ –º—ñ—Å—Ç–∞."
            context["confirm_pending"] = None
            sessions[session_id] = context
            return jsonify({"reply": reply_text})
        
        elif user_message_norm in ["–Ω–∞–≤–ø–∞–∫–∏", "–Ω–∞–æ–±–æ—Ä–æ—Ç", "–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π", "–≤ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É"] and pending_details:
            # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É
            original_start = normalize(pending_details["departure_city_uk"])
            original_end = normalize(pending_details["arrival_city_uk"])
            
            context["confirm_pending"] = None # –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            context["partial_city"] = None    # –°–∫–∏–¥–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –≤–≤–µ–¥–µ–Ω–µ –º—ñ—Å—Ç–æ
            sessions[session_id] = context   # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º –ø–æ—à—É–∫–æ–º

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫ —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
            user_message_for_reverse = f"–ó {original_end} –¥–æ {original_start}"
            # –¶–µ –≤–∏–∫–ª–∏—á–µ –æ—Å–Ω–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –º—ñ—Å—Ç –Ω–∏–∂—á–µ
            # –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ä–µ–∫—É—Ä—Å—ñ—ó, –ø—Ä–æ—Å—Ç–æ –º–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ user_message_norm —ñ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ–¥—É –π—Ç–∏ –¥–∞–ª—ñ
            user_message_norm = normalize(user_message_for_reverse)
            # –û—á–∏—Å—Ç–∏–º–æ cities, —â–æ–± extract_cities_from_text —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
            cities = []
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑ –Ω–æ–≤–∏–º user_message_norm
        else:
            # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ—á—ñ—Ç–∫–∞, –º–æ–∂–Ω–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ —É—Ç–æ—á–Ω–∏—Ç–∏ –∞–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            reply_text = f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç: {pending_details['departure_city_uk']} ‚Üí {pending_details['arrival_city_uk']} ({pending_details['route_name_uk']}), –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ {pending_details['departure_time']}. –ù–∞–ø–∏—à—ñ—Ç—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'."
            return jsonify({"reply": reply_text})


    # 3. Small talk —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
    small_talk_keywords = ["—è–∫ —Å–ø—Ä–∞–≤–∏", "–ø—Ä–∏–≤—ñ—Ç", "–¥—è–∫—É—é", "—Å–ø–∞—Å–∏–±—ñ", "–ø–æ–∫–∞", "–±—É–≤–∞–π", "—â–æ —Ç–∏", "—Ç–∏ —Ö—Ç–æ", "–±–æ—Ç", "–¥–∏—Å–ø–µ—Ç—á–µ—Ä"]
    if any(keyword in user_message_norm for keyword in small_talk_keywords) and not extract_cities_from_text(user_message_norm):
        # –Ø–∫—â–æ —Ü–µ small talk —ñ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–∑–≤ –º—ñ—Å—Ç (—â–æ–± –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞—Ç–∏ –ø–æ—à—É–∫ –º–∞—Ä—à—Ä—É—Ç—É)
        reply_text = gpt_reply(user_message, session_id)
        context.setdefault("chat_history", []).append({"role": "assistant", "content": reply_text})
        sessions[session_id] = context
        return jsonify({"reply": reply_text})

    # 4. –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, —è–∫—â–æ —â–µ –Ω–µ –≤—ñ—Ç–∞–ª–∏—Å—è
    if not context["greeted"]:
        reply_text = "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä Bus-Timel. –ù–∞–ø–∏—à—ñ—Ç—å, –∑–≤—ñ–¥–∫–∏, –∫—É–¥–∏ —Ç–∞ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º) –∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ üöå"
        context["greeted"] = True
        context.setdefault("chat_history", []).append({"role": "assistant", "content": reply_text})
        sessions[session_id] = context
        return jsonify({"reply": reply_text})
    
    # 5. –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    cities = extract_cities_from_text(user_message_norm)

    if len(cities) == 2:
        start_city_norm, end_city_norm = cities[0], cities[1]
        
        if start_city_norm == end_city_norm:
            reply_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ä—ñ–∑–Ω—ñ –º—ñ—Å—Ç–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–±—É—Ç—Ç—è."
        else:
            logging.info(f"–®—É–∫–∞—é —Å–µ–≥–º–µ–Ω—Ç–∏: {start_city_norm} -> {end_city_norm}")
            found_segments = find_route_segments(start_city_norm, end_city_norm)

            if found_segments:
                if len(found_segments) == 1:
                    segment = found_segments[0]
                    reply_text = (f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å: {segment['route_name_uk']}.\n"
                                  f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {segment['departure_city_uk']} ({segment.get('departure_address_uk', 'N/A')}) –æ {segment['departure_time']}.\n"
                                  f"–ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {segment['arrival_city_uk']} ({segment.get('arrival_address_uk', 'N/A')}) –æ {segment['arrival_time']}.\n"
                                  f"–¶—ñ–Ω–∞: {segment['price']} –≥—Ä–Ω. –ß–∞—Å—Ç–æ—Ç–∞: {segment['frequency']}.\n"
                                  f"–ü—ñ–¥—Ö–æ–¥–∏—Ç—å —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç? (—Ç–∞–∫/–Ω—ñ)")
                    if segment.get("url_slug"):
                         reply_text += f"\n–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://bus-timel.com.ua/routes/{segment['url_slug']}.html"

                    context["confirm_pending"] = {"details": segment, "alternatives_count": len(found_segments)}
                else:
                    reply_text = f"–ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()}:\n\n"
                    for i, segment in enumerate(found_segments[:3]): # –û–±–º–µ–∂–∏–º–æ –ø–æ–∫–∞–∑ –ø–µ—Ä—à–∏–º–∏ 3
                        reply_text += (
                            f"{i+1}. –†–µ–π—Å: {segment['route_name_uk']}\n"
                            f"   –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {segment['departure_city_uk']} –æ {segment['departure_time']}\n"
                            f"   –ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {segment['arrival_city_uk']} –æ {segment['arrival_time']}\n"
                            f"   –¶—ñ–Ω–∞: {segment['price']} –≥—Ä–Ω. –ß–∞—Å—Ç–æ—Ç–∞: {segment['frequency']}\n\n"
                        )
                    reply_text += "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—ñ–Ω—à–∏–π', —è–∫—â–æ –∂–æ–¥–µ–Ω –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å."
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∫—Ä–æ—Ü—ñ (–ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ)
                    # context["route_options"] = found_segments 
            else:
                reply_text = f"–ù–∞ –∂–∞–ª—å, –ø—Ä—è–º–∏—Ö —Ä–µ–π—Å—ñ–≤ –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç –∞–±–æ –∑–∞–ø–∏—Ç–∞—Ç–∏ GPT."
                # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–ø—Ü—ñ—é "–ó–∞–ø–∏—Ç–∞—Ç–∏ GPT?"
                # if "–∑–∞–ø–∏—Ç–∞—Ç–∏ gpt" in user_message_norm or True: # –¢–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∂–¥–∏ –ø–∏—Ç–∞—î–º–æ GPT
                #    gpt_prompt = f"–ß–∏ —î –∞–≤—Ç–æ–±—É—Å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()}? –Ø–∫—â–æ —Ç–∞–∫, –Ω–∞–¥–∞–π –¥–µ—Ç–∞–ª—ñ. –Ø–∫—â–æ –Ω—ñ, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É."
                #    reply_text += "\n\n" + gpt_reply(gpt_prompt, session_id)

    elif len(cities) == 1:
        partial_city = cities[0]
        if context.get("partial_city") and context["partial_city"] != partial_city : # –Ø–∫—â–æ –≤–∂–µ –±—É–ª–æ –æ–¥–Ω–µ –º—ñ—Å—Ç–æ —ñ –≤–≤–µ–ª–∏ –¥—Ä—É–≥–µ
            # –¶–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –º—ñ—Å—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É.
            # –ü–æ—Ç–æ—á–Ω–∞ extract_cities_from_text –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∑–Ω–∞–π—Ç–∏ –¥–≤–∞ –º—ñ—Å—Ç–∞ –æ–¥—Ä–∞–∑—É.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, —è–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –æ–¥–Ω–µ –º—ñ—Å—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º–æ –¥—Ä—É–≥–µ.
            context["partial_city"] = partial_city
            reply_text = f"–ó {partial_city.capitalize()} –∫—É–¥–∏ –±–∞–∂–∞—î—Ç–µ —ó—Ö–∞—Ç–∏? –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –º—ñ—Å—Ç–æ –ø—Ä–∏–±—É—Ç—Ç—è."
        else:
            context["partial_city"] = partial_city
            reply_text = f"–î–æ–±—Ä–µ, –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è {partial_city.capitalize()}. –ê –∫—É–¥–∏ –ø—Ä—è–º—É—î—Ç–µ?"

    elif any(kw in user_message_norm for kw in ["–º–∞—Ä—à—Ä—É—Ç–∏ –∑", "—Ä–µ–π—Å–∏ –∑"]):
        city_match_for_listing = None
        words_in_msg = user_message_norm.replace("–º–∞—Ä—à—Ä—É—Ç–∏ –∑", "").replace("—Ä–µ–π—Å–∏ –∑","").strip().split()
        for word in words_in_msg:
            city_match_for_listing = match_city(word)
            if city_match_for_listing:
                break
        
        if city_match_for_listing:
            departing_routes = []
            for r_data in routes_data:
                if r_data["stops"] and normalize(r_data["stops"][0]["city"]["uk"]) == city_match_for_listing:
                    destination_city = r_data["stops"][-1]["city"]["uk"]
                    price = r_data.get("price", "—Ü—ñ–Ω–∞?")
                    departing_routes.append(f"‚Äì {destination_city.capitalize()} ({price} –≥—Ä–Ω) —á–∞—Å: {r_data['stops'][0]['time']}")
            
            if departing_routes:
                reply_text = f"üìç –î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ {city_match_for_listing.capitalize()}:\n" + "\n".join(departing_routes[:5])
                if len(departing_routes) > 5:
                    reply_text += "\n... —Ç–∞ —ñ–Ω—à—ñ."
            else:
                reply_text = f"–ù–∞ –∂–∞–ª—å, –º–∞—Ä—à—Ä—É—Ç—ñ–≤, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ {city_match_for_listing.capitalize()}, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üôÅ"
        else:
            reply_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–ª—è —è–∫–æ–≥–æ —à—É–∫–∞—Ç–∏ —Ä–µ–π—Å–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '—Ä–µ–π—Å–∏ –∑ –ö–∏—ó–≤'"
            
    else: # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–º–∞–Ω–¥—É
        if not reply_text: # –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –∑ —É–º–æ–≤ –≤–∏—â–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
             # –Ø–∫—â–æ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–ª–∏ –º—ñ—Å—Ç–∞ —ñ –Ω–µ –±—É–ª–æ —ñ–Ω—à–∏—Ö –∫–æ–º–∞–Ω–¥, –ø–µ—Ä–µ–¥–∞—î–º–æ GPT
            if context.get("greeted"): # –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ GPT –Ω–∞ –ø–µ—Ä—à–µ "–ø—Ä–∏–≤—ñ—Ç"
                logging.info(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É/–º—ñ—Å—Ç–∞: '{user_message}'. –ü–µ—Ä–µ–¥–∞—é GPT.")
                reply_text = gpt_reply(user_message, session_id)
            else: # –Ø–∫—â–æ —â–µ –Ω–µ –≤—ñ—Ç–∞–ª–∏—Å—è —ñ –ø—Ä–∏–π—à–ª–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                reply_text = "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä Bus-Timel. –ù–∞–ø–∏—à—ñ—Ç—å, –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ üöå"
                context["greeted"] = True


    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó
    context.setdefault("chat_history", []).append({"role": "assistant", "content": reply_text})
    sessions[session_id] = context
    
    logging.info(f"[{session_id}] –í—ñ–¥–ø–æ–≤—ñ–¥—å: {reply_text}")
    return jsonify({"reply": reply_text})

@app.route("/")
def index():
    return "ü§ñ Bus-Timel Dispatcher Bot ‚Äî online."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    # –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –º–æ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏ debug=True, –∞–ª–µ –ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!
    app.run(host="0.0.0.0", port=port, debug=False)
