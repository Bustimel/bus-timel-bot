import os
import json
import re
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

with open("routes.json", "r", encoding="utf-8") as f:
    routes = json.load(f)

def normalize(text):
    return re.sub(r'\s+', ' ', text.lower().replace("‚Äô", "'").replace("—ñ", "–∏").replace("'", "").strip())

def extract_direction_cities(message, known_cities):
    text = normalize(message)
    return [city for city in known_cities if city in text]

def build_route_link(start, end):
    s = normalize(start).replace(" ", "-")
    e = normalize(end).replace(" ", "-")
    return f"https://bus-timel.com.ua/routes/{s}-{e}.html"

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    message = data.get("message", "")
    session_id = data.get("session_id", "default")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º—ñ—Å—Ç
    all_cities = set()
    for r in routes:
        all_cities.add(normalize(r["start"]))
        all_cities.add(normalize(r["end"]))

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ, —è–∫—ñ –º—ñ—Å—Ç–∞ –∑–≥–∞–¥–∞–Ω—ñ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    matched_cities = extract_direction_cities(message, all_cities)

    if len(matched_cities) == 2:
        # –Ø–∫—â–æ —Ä—ñ–≤–Ω–æ –¥–≤–∞ –º—ñ—Å—Ç–∞ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–∏
        start, end = matched_cities[1], matched_cities[0]
        return jsonify({
            "reply": f"–í–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ –∑ {start.capitalize()} –¥–æ {end.capitalize()}?",
            "confirm": {
                "start": start,
                "end": end
            }
        })

    if len(matched_cities) < 2:
        return jsonify({"reply": "–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑ —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏."})

    # –Ø–∫—â–æ –±—ñ–ª—å—à–µ 2 –º—ñ—Å—Ç ‚Äî —à—É–∫–∞—î–º–æ –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –º—ñ–∂ –∑–≥–∞–¥–∞–Ω–∏–º–∏
    matched_routes = []
    for route in routes:
        if normalize(route["start"]) in matched_cities and normalize(route["end"]) in matched_cities:
            matched_routes.append(route)

    if matched_routes:
        replies = []
        for r in matched_routes:
            link = build_route_link(r["start"], r["end"])
            reply = f"üöå <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {r['start']} ‚Üí {r['end']}\n"
            reply += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {r.get('price', '–£—Ç–æ—á–Ω—é–π—Ç–µ')} –≥—Ä–Ω\n"
            reply += f"‚è≥ <b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {r.get('duration', '‚Äî')}\n"
            if r.get("departure_times"):
                reply += f"‚è∞ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {', '.join(r['departure_times'])}\n"
            if r.get("arrival_times"):
                reply += f"üïì <b>–ü—Ä–∏–±—É—Ç—Ç—è:</b> {', '.join(r['arrival_times'])}\n"
            reply += f"üîó <a href='{link}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ä—à—Ä—É—Ç</a>\nüìù <a href='{link}'>–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ</a>"
            replies.append(reply)
        return jsonify({"reply": "\n\n".join(replies), "html": True})

    return jsonify({"reply": "–ù–µ –∑–Ω–∞–π—à–æ–≤ –º–∞—Ä—à—Ä—É—Ç. –£—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø—Ä—è–º–æ–∫."})

@app.route("/")
def index():
    return "Bus-Timel Directional bot is working."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
