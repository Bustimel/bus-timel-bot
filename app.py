
import os
import json
import re
from flask import Flask, request, jsonify
from flask_cors import CORS
from thefuzz import process

app = Flask(__name__)
CORS(app)

with open("routes.json", "r", encoding="utf-8") as f:
    routes = json.load(f)

CITY_FORMS = {
  "бабанка": [
    "бабанк",
    "бабанка",
    "бабанкою",
    "бабанку",
    "бабанкі"
  ],
  "баштанка": [
    "баштанк",
    "баштанка",
    "баштанкою",
    "баштанку",
    "баштанкі"
  ],
  "бориспіль": [
    "бориспіль",
    "бориспільа",
    "бориспілье",
    "бориспільом",
    "бориспільу"
  ],
  "велика виска": [
    "велика виск",
    "велика виска",
    "велика вискою",
    "велика виску",
    "велика вискі"
  ],
  "вороновиця": [
    "вороновицю",
    "вороновиця",
    "вороновиці"
  ],
  "вінниця": [
    "вінницю",
    "вінниця",
    "вінниці"
  ],
  "гайсин": [
    "гайсин",
    "гайсина",
    "гайсине",
    "гайсином",
    "гайсину"
  ],
  "гришине": [
    "гришине",
    "гришинеа",
    "гришинее",
    "гришинеом",
    "гришинеу"
  ],
  "дніпро": [
    "дніпра",
    "дніпро",
    "дніпру"
  ],
  "добропілля": [
    "добропіллю",
    "добропілля",
    "добропіллі"
  ],
  "дружківка": [
    "дружківк",
    "дружківка",
    "дружківкою",
    "дружківку",
    "дружківкі"
  ],
  "житомир": [
    "житомир",
    "житомира",
    "житомире",
    "житомиром",
    "житомиру"
  ],
  "запоріжжя": [
    "запоріжжю",
    "запоріжжя",
    "запоріжжі"
  ],
  "знам'янка": [
    "знам'янк",
    "знам'янка",
    "знам'янкою",
    "знам'янку",
    "знам'янкі"
  ],
  "золотоноша": [
    "золотонош",
    "золотоноша",
    "золотоношою",
    "золотоношу",
    "золотоноші"
  ],
  "казанка": [
    "казанк",
    "казанка",
    "казанкою",
    "казанку",
    "казанкі"
  ],
  "кам'янка": [
    "кам'янк",
    "кам'янка",
    "кам'янкою",
    "кам'янку",
    "кам'янкі"
  ],
  "канів": [
    "канів",
    "каніва",
    "каніве",
    "канівом",
    "каніву"
  ],
  "карлівка": [
    "карлівк",
    "карлівка",
    "карлівкою",
    "карлівку",
    "карлівкі"
  ],
  "київ": [
    "київ",
    "київа",
    "київе",
    "київом",
    "київу"
  ],
  "коблево": [
    "коблева",
    "коблево",
    "коблеву"
  ],
  "краматорськ": [
    "краматорськ",
    "краматорська",
    "краматорське",
    "краматорськом",
    "краматорську"
  ],
  "красноград": [
    "красноград",
    "краснограда",
    "краснограде",
    "красноградом",
    "краснограду"
  ],
  "краснопілка": [
    "краснопілк",
    "краснопілка",
    "краснопілкою",
    "краснопілку",
    "краснопілкі"
  ],
  "кривий ріг": [
    "кривий ріг",
    "кривий ріга",
    "кривий ріге",
    "кривий рігом",
    "кривий рігу"
  ],
  "кропивницький": [
    "кропивницький",
    "кропивницькийа",
    "кропивницькийе",
    "кропивницькийом",
    "кропивницькийу"
  ],
  "лубни": [
    "лубни",
    "лубниа",
    "лубние",
    "лубниом",
    "лубниу"
  ],
  "львів": [
    "львів",
    "львіва",
    "львіве",
    "львівом",
    "львіву"
  ],
  "межова": [
    "межов",
    "межова",
    "межовою",
    "межову",
    "межові"
  ],
  "миколаїв": [
    "миколаїв",
    "миколаїва",
    "миколаїве",
    "миколаївом",
    "миколаїву"
  ],
  "миколаївка": [
    "миколаївк",
    "миколаївка",
    "миколаївкою",
    "миколаївку",
    "миколаївкі"
  ],
  "немирів": [
    "немирів",
    "немиріва",
    "немиріве",
    "немирівом",
    "немиріву"
  ],
  "новий буг": [
    "новий буг",
    "новий буга",
    "новий буге",
    "новий бугом",
    "новий бугу"
  ],
  "новоархангельск": [
    "новоархангельск",
    "новоархангельска",
    "новоархангельске",
    "новоархангельском",
    "новоархангельску"
  ],
  "новомосковськ (самар)": [
    "новомосковськ (самар)",
    "новомосковськ (самар)а",
    "новомосковськ (самар)е",
    "новомосковськ (самар)ом",
    "новомосковськ (самар)у"
  ],
  "одеса": [
    "одес",
    "одеса",
    "одесою",
    "одесу",
    "одесі"
  ],
  "олександрівка": [
    "олександрівк",
    "олександрівка",
    "олександрівкою",
    "олександрівку",
    "олександрівкі"
  ],
  "олександрія": [
    "олександрію",
    "олександрія",
    "олександріі"
  ],
  "орадівка": [
    "орадівк",
    "орадівка",
    "орадівкою",
    "орадівку",
    "орадівкі"
  ],
  "п'ятихатки": [
    "п'ятихатки",
    "п'ятихаткиа",
    "п'ятихаткие",
    "п'ятихаткиом",
    "п'ятихаткиу"
  ],
  "павлоград": [
    "павлоград",
    "павлограда",
    "павлограде",
    "павлоградом",
    "павлограду"
  ],
  "пирятин": [
    "пирятин",
    "пирятина",
    "пирятине",
    "пирятином",
    "пирятину"
  ],
  "покровськ": [
    "покровськ",
    "покровська",
    "покровське",
    "покровськом",
    "покровську"
  ],
  "полтава": [
    "полтав",
    "полтава",
    "полтавою",
    "полтаву",
    "полтаві"
  ],
  "райгород": [
    "райгород",
    "райгорода",
    "райгороде",
    "райгородом",
    "райгороду"
  ],
  "решитилівка": [
    "решитилівк",
    "решитилівка",
    "решитилівкою",
    "решитилівку",
    "решитилівкі"
  ],
  "рівне": [
    "рівне",
    "рівнеа",
    "рівнее",
    "рівнеом",
    "рівнеу"
  ],
  "слов'янка": [
    "слов'янк",
    "слов'янка",
    "слов'янкою",
    "слов'янку",
    "слов'янкі"
  ],
  "слов'янськ": [
    "слов'янськ",
    "слов'янська",
    "слов'янське",
    "слов'янськом",
    "слов'янську"
  ],
  "слов’янськ": [
    "слов’янськ",
    "слов’янська",
    "слов’янське",
    "слов’янськом",
    "слов’янську"
  ],
  "смоліне": [
    "смоліне",
    "смолінеа",
    "смолінее",
    "смолінеом",
    "смолінеу"
  ],
  "сміла": [
    "сміл",
    "сміла",
    "смілою",
    "смілу",
    "смілі"
  ],
  "суми": [
    "суми",
    "сумиа",
    "сумие",
    "сумиом",
    "сумиу"
  ],
  "тернопіль": [
    "тернопіль",
    "тернопільа",
    "тернопілье",
    "тернопільом",
    "тернопільу"
  ],
  "умань": [
    "умань",
    "уманьа",
    "уманье",
    "уманьом",
    "уманьу"
  ],
  "харків": [
    "харків",
    "харківа",
    "харківе",
    "харківом",
    "харківу"
  ],
  "хмельницький": [
    "хмельницький",
    "хмельницькийа",
    "хмельницькийе",
    "хмельницькийом",
    "хмельницькийу"
  ],
  "хмельове": [
    "хмельове",
    "хмельовеа",
    "хмельовее",
    "хмельовеом",
    "хмельовеу"
  ],
  "хорол": [
    "хорол",
    "хорола",
    "хороле",
    "хоролом",
    "хоролу"
  ],
  "черкаси": [
    "черкаси",
    "черкасиа",
    "черкасие",
    "черкасиом",
    "черкасиу"
  ],
  "ізюм": [
    "ізюм",
    "ізюма",
    "ізюме",
    "ізюмом",
    "ізюму"
  ]
}

city_aliases = {
    "днепр": "дніпро", "умань": "умань", "львов": "львів", "винница": "вінниця",
    "кропивницкий": "кропивницький", "доброполье": "добропілля", "краматорск": "краматорськ",
    "словянск": "слов’янськ", "славянск": "слов’янськ", "черкасс": "черкаси", "павлограл": "павлоград", "днепропетровск": "дніпро", "кировоград": "кропивницький", "кіровоград": "кропивницький"
}

last_session = {}

def normalize(text):
    text = re.sub(r"[’']", "", text.lower()).strip()
    return re.sub(r"\s+", " ", text)

def match_city(word):
    norm = normalize(word)
    for base, forms in CITY_FORMS.items():
        if norm in forms:
            return base
    # якщо не знайдено — fuzzy
    result = process.extractOne(norm, list(CITY_FORMS.keys()))
    return result[0] if result and result[1] >= 75 else None

def extract_two_cities(text):
    words = normalize(text).split()
    found = []
    for word in words:
        city = match_city(word)
        if city and city not in found:
            found.append(city)
    return found[:2]

def route_link(start, end):
    return f"https://bus-timel.com.ua/routes/{start.replace(' ', '-')}-{end.replace(' ', '-')}.html"

def find_real_route(start, end):
    for route in routes:
        all_points = [route["start"]] + [s["city"] for s in route.get("stops", [])] + [route["end"]]
        if start in all_points and end in all_points and all_points.index(start) < all_points.index(end):
            return route, all_points
    return None, []

def extract_price(route, end):
    if route["end"].lower() == end:
        return route.get("price")
    for s in route.get("stops", []):
        if s["city"].lower() == end and s.get("price", "").replace(" ", "").isdigit():
            return s["price"]
    return None

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    msg_raw = data.get("message", "")
    session_id = data.get("session_id", "default")
    msg = normalize(msg_raw)

    if session_id not in last_session:
        last_session[session_id] = {"greeted": False, "confirm": None}

    session = last_session[session_id]

    if not session["greeted"]:
        session["greeted"] = True
        return jsonify({"reply": "Вітаю! Я диспетчер Bus-Timel. Напишіть, будь ласка, звідки і куди ви хочете їхати."})

    if msg in ["так", "да"] and session["confirm"]:
        start, end = session["confirm"]
        session["confirm"] = None
        route, points = find_real_route(start, end)
        if route:
            i1 = points.index(start)
            i2 = points.index(end)
            i2 = points.index(end)
            price = extract_price(route, end) or "Уточнюйте"
            link = route_link(start, end)
            reply = f"🚌 <b>Маршрут:</b> {start} → {end}\n"
            reply += f"💰 <b>Ціна:</b> {price} грн\n"
            reply += f"⏳ <b>Тривалість:</b> {route.get('duration', '—')}\n"
            if route.get("departure_times"):
                reply += f"⏰ <b>Відправлення:</b> {route['departure_times'][0]}\n"
            if route.get("arrival_times"):
                reply += f"🕓 <b>Прибуття:</b> {route['arrival_times'][0]}\n"
            if i2 > i1 + 1:
                reply += "🗺️ <b>Зупинки:</b> " + " → ".join(points[i1+1:i2]) + "\n"
            reply += f"🔗 <a href='{link}'>Переглянути маршрут</a>\n📝 <a href='{link}'>Забронювати місце</a>"
            return jsonify({"reply": reply, "html": True})
        else:
            return jsonify({"reply": "Маршрут не знайдено. Уточніть, будь ласка, ще раз."})

    if msg in ["ні", "нет", "наоборот", "в обратном напрямку", "в обратном направлении"] and session["confirm"]:
        s, e = session["confirm"]
        session["confirm"] = (e, s)
        return jsonify({"reply": f"Тоді, можливо, з {e} до {s}?", "confirm": {"start": e, "end": s}})

    cities = extract_two_cities(msg)
    if len(cities) == 2:
        session["confirm"] = (cities[0], cities[1])
        return jsonify({
            "reply": f"Ви маєте на увазі з {cities[0].capitalize()} до {cities[1].capitalize()}?",
            "confirm": {"start": cities[0], "end": cities[1]}
        })
    elif len(cities) == 1:
        return jsonify({"reply": f"З якого міста ви хочете їхати до {cities[0].capitalize()}?"})
    else:
        return jsonify({"reply": "Напишіть, будь ласка, з якого міста і куди ви хочете їхати."})

@app.route("/")
def index():
    return "Bus-Timel Declension Bot"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
