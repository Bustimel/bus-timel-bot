import os
import json
import re
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

with open("routes.json", "r", encoding="utf-8") as f:
    routes = json.load(f)

# –°–∏–Ω–æ–Ω—ñ–º–∏ –º—ñ—Å—Ç (—Ä–æ—Å—ñ–π—Å—å–∫–∞ ‚Üí —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞)
city_aliases = {
    "–¥–Ω–µ–ø—Ä": "–¥–Ω—ñ–ø—Ä–æ",
    "–¥–Ω—ñ–ø—Ä": "–¥–Ω—ñ–ø—Ä–æ",
    "—É–º–∞–Ω—å": "—É–º–∞–Ω—å",
    "—É–º–∞–Ω–∏": "—É–º–∞–Ω—å",
    "–ª—å–≤–æ–≤": "–ª—å–≤—ñ–≤",
    "—Ö–∞—Ä—å–∫–æ–≤": "—Ö–∞—Ä–∫—ñ–≤",
    "–≤–∏–Ω–Ω–∏—Ü–∞": "–≤—ñ–Ω–Ω–∏—Ü—è",
    "–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π": "–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π",
    "–¥–æ–±—Ä–æ–ø–æ–ª—å–µ": "–¥–æ–±—Ä–æ–ø—ñ–ª–ª—è",
    "–∫—Ä–∞–º–∞—Ç–æ—Ä—Å–∫": "–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫",
    "—Å–ª–æ–≤—è–Ω—Å–∫": "—Å–ª–æ–≤‚Äô—è–Ω—Å—å–∫",
    "–ø–∞–≤–ª–æ–≥—Ä–∞–¥": "–ø–∞–≤–ª–æ–≥—Ä–∞–¥"
}

faq_keywords = {
    "–±–∞–≥–∞–∂": "‚úÖ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ 1 –≤–∞–ª—ñ–∑—É –¥–æ 20 –∫–≥ —Ç–∞ —Ä—É—á–Ω—É –ø–æ–∫–ª–∞–∂—É.",
    "—Ç–≤–∞—Ä–∏–Ω": "‚úÖ –¢–∞–∫, —Ç–≤–∞—Ä–∏–Ω–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ —É –ø–µ—Ä–µ–Ω–æ—Å–∫–∞—Ö. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –≤–æ–¥—ñ—è.",
    "–¥—ñ—Ç–∏": "üë∂ –î—ñ—Ç–∏ –¥–æ 5 —Ä–æ–∫—ñ–≤ ‚Äî –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –±–µ–∑ –æ–∫—Ä–µ–º–æ–≥–æ –º—ñ—Å—Ü—è.",
    "–æ–ø–ª–∞—Ç–∞": "üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ—Å–∞–¥—Ü—ñ –∞–±–æ –ø—ñ—Å–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.",
    "–ø–µ—Ä–µ—Ä–≤–∞": "üöª –°–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ –ø–µ—Ä–µ—Ä–≤–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É.",
    "wifi": "üì∂ –£ –±—ñ–ª—å—à–æ—Å—Ç—ñ –∞–≤—Ç–æ–±—É—Å—ñ–≤ —î Wi-Fi."
}

friendly_phrases = ["–ø—Ä–∏–≤—ñ—Ç", "—è–∫ —Å–ø—Ä–∞–≤–∏", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–ø—Ä–∏–≤–µ—Ç", "–æ–∫", "—Å–ø–∞—Å–∏–±–æ", "–¥—è–∫—É—é", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ"]

last_session = {}

def normalize(text):
    text = re.sub(r"['‚Äô`]", "", text.lower().strip())
    text = re.sub(r"\s+", " ", text)
    for alias, real in city_aliases.items():
        if alias in text:
            text = text.replace(alias, real)
    return text

def extract_cities(text):
    all_cities = set()
    for r in routes:
        all_cities.add(normalize(r["start"]))
        all_cities.add(normalize(r["end"]))
    found = [c for c in all_cities if c in normalize(text)]
    return found

def route_link(start, end):
    s = normalize(start).replace(" ", "-")
    e = normalize(end).replace(" ", "-")
    return f"https://bus-timel.com.ua/routes/{s}-{e}.html"

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    message = data.get("message", "").lower()
    session_id = data.get("session_id", "default")

    msg = normalize(message)

    if msg in friendly_phrases:
        return jsonify({"reply": "–í—ñ—Ç–∞—é! –Ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä Bus-Timel. –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑ —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏."})

    for keyword, answer in faq_keywords.items():
        if keyword in msg:
            return jsonify({"reply": answer})

    if msg in ["—Ç–∞–∫", "–¥–∞"] and session_id in last_session:
        start, end = last_session[session_id]
    elif msg in ["–Ω—ñ", "–Ω–µ—Ç"] and session_id in last_session:
        del last_session[session_id]
        return jsonify({"reply": "–û–∫–µ–π, —Ç–æ–¥—ñ —É—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø—Ä—è–º–æ–∫ —â–µ —Ä–∞–∑."})
    else:
        cities = extract_cities(msg)
        if len(cities) == 2:
            start, end = cities[1], cities[0]
            last_session[session_id] = (start, end)
            return jsonify({
                "reply": f"–í–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ –∑ {start.capitalize()} –¥–æ {end.capitalize()}?",
                "confirm": {"start": start, "end": end}
            })
        else:
            return jsonify({"reply": "–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ (–º–æ–∂–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é)."})

    # –ü–æ—à—É–∫ –º–∞—Ä—à—Ä—É—Ç—É
    for r in routes:
        if normalize(r["start"]) == start and normalize(r["end"]) == end:
            link = route_link(r["start"], r["end"])
            reply = f"üöå <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {r['start']} ‚Üí {r['end']}\n"
            reply += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {r.get('price', '–£—Ç–æ—á–Ω—é–π—Ç–µ')} –≥—Ä–Ω\n"
            reply += f"‚è≥ <b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {r.get('duration', '‚Äî')}\n"
            if r.get("departure_times"):
                reply += f"‚è∞ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {', '.join(r['departure_times'])}\n"
            if r.get("arrival_times"):
                reply += f"üïì <b>–ü—Ä–∏–±—É—Ç—Ç—è:</b> {', '.join(r['arrival_times'])}\n"
            reply += f"üîó <a href='{link}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ä—à—Ä—É—Ç</a>\nüìù <a href='{link}'>–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ</a>"
            return jsonify({"reply": reply, "html": True})

    return jsonify({"reply": "–ú–∞—Ä—à—Ä—É—Ç –∑ —Ü–∏—Ö –º—ñ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –£—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑."})

@app.route("/")
def index():
    return "Bus-Timel universal dispatcher bot."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
