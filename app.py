import os
import json
import re
from flask import Flask, request, jsonify
from flask_cors import CORS
from thefuzz import process

app = Flask(__name__)
CORS(app)

with open("routes.json", "r", encoding="utf-8") as f:
    routes = json.load(f)

# –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –º—ñ—Å—Ç–∞
ALL_CITIES = sorted(set(
    city.lower()
    for route in routes
    for city in [route["start"], route["end"]] + [s["city"] for s in route.get("stops", [])]
))

# –°–∏–Ω–æ–Ω—ñ–º–∏ —ñ —Ä–æ—Å—ñ–π—Å—å–∫—ñ –Ω–∞–∑–≤–∏
city_aliases = {
    "–¥–Ω–µ–ø—Ä": "–¥–Ω—ñ–ø—Ä–æ", "—É–º–∞–Ω—å": "—É–º–∞–Ω—å", "–ª—å–≤–æ–≤": "–ª—å–≤—ñ–≤", "–≤–∏–Ω–Ω–∏—Ü–∞": "–≤—ñ–Ω–Ω–∏—Ü—è",
    "–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π": "–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π", "–¥–æ–±—Ä–æ–ø–æ–ª—å–µ": "–¥–æ–±—Ä–æ–ø—ñ–ª–ª—è", "–∫—Ä–∞–º–∞—Ç–æ—Ä—Å–∫": "–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫",
    "—Å–ª–æ–≤—è–Ω—Å–∫": "—Å–ª–æ–≤‚Äô—è–Ω—Å—å–∫", "—Å–ª–∞–≤—è–Ω—Å–∫": "—Å–ª–æ–≤‚Äô—è–Ω—Å—å–∫", "–ø–∞–≤–ª–æ–≥—Ä–∞–ª": "–ø–∞–≤–ª–æ–≥—Ä–∞–¥", "—á–µ—Ä–∫–∞—Å—Å": "—á–µ—Ä–∫–∞—Å–∏"
}

# –°–ª–æ–≤–∞‚Äì–Ω–∞–ºi—Ä–∏, —â–æ –ø–æ–∑–Ω–∞—á–∞—é—Ç—å –±–∞–∂–∞–Ω–Ω—è –ø–æ—ó—Ö–∞—Ç–∏ –∞–±–æ –∑–∞–º–æ–≤–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É
INTENT_KEYWORDS = [
    "—ó—Ö–∞—Ç–∏", "–¥–æ—ó—Ö–∞—Ç–∏", "–∫—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫", "–∑–∞–º–æ–≤–∏—Ç–∏", "–∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏",
    "–ø–æ—Ç—Ä—ñ–±–µ–Ω –∞–≤—Ç–æ–±—É—Å", "–ø–æ—Ç—Ä—ñ–±–µ–Ω –±—É—Å", "–º–∞—Ä—à—Ä—É—Ç–∫–∞", "–º–∞—Ä—à—Ä—É—Ç–∫–∏"
]

last_session = {}

def normalize(text):
    text = re.sub(r"[‚Äô']", "", text.lower()).strip()
    text = re.sub(r"\s+", " ", text)
    for alias, real in city_aliases.items():
        text = text.replace(alias, real)
    return text

def contains_intent(msg):
    return any(kw in msg for kw in INTENT_KEYWORDS)

def fuzzy_city(word):
    word = normalize(word)
    result = process.extractOne(word, ALL_CITIES)
    return result[0] if result and result[1] >= 70 else None

def extract_two_cities(text):
    words = normalize(text).split()
    found = []
    for word in words:
        city = fuzzy_city(word)
        if city and city not in found:
            found.append(city)
    return found[:2]

def route_link(start, end):
    return f"https://bus-timel.com.ua/routes/{normalize(start).replace(' ', '-')}-{normalize(end).replace(' ', '-')}.html"

def find_route_by_stops(start, end):
    for route in routes:
        all_points = [route["start"]] + [s["city"] for s in route.get("stops", [])] + [route["end"]]
        if start in all_points and end in all_points and all_points.index(start) < all_points.index(end):
            return route, all_points
    return None, []

def extract_price(route, end):
    if normalize(route["end"]) == end and route.get("price"):
        return route["price"]
    for stop in route.get("stops", []):
        if normalize(stop["city"]) == end and stop.get("price") and stop["price"].replace(" ", "").isdigit():
            return stop["price"]
    return None

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    message = data.get("message", "")
    session_id = data.get("session_id", "default")
    msg = normalize(message)

    if session_id not in last_session:
        last_session[session_id] = {"greeted": False}

    # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ
    if not last_session[session_id]["greeted"]:
        last_session[session_id]["greeted"] = True
        return jsonify({"reply": "–í—ñ—Ç–∞—é! –Ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä Bus-Timel. –ö—É–¥–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ —Ç–∞ –∑–≤—ñ–¥–∫–∏?"})

    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–º—ñ—Ä—É —ó—Ö–∞—Ç–∏ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–º–æ
    if not contains_intent(msg) and len(extract_two_cities(msg)) < 2:
        return jsonify({"reply": "–Ø –ª–∏—à–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∞–≤—Ç–æ–±—É—Å–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤. –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫—É–¥–∏ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö–∞—Ç–∏ —Ç–∞ –∑–≤—ñ–¥–∫–∏."})

    # –û–±—Ä–æ–±–∫–∞ ‚Äú–Ω–∞–æ–±–æ—Ä–æ—Ç‚Äù
    if any(w in msg for w in ["–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏", "–Ω–∞–æ–±–æ—Ä–æ—Ç", "–Ω—ñ", "–Ω–µ—Ç"]):
        if "confirm" in last_session[session_id]:
            start, end = last_session[session_id]["confirm"]
            start, end = end, start
        else:
            return jsonify({"reply": "–û–∫–µ–π, —É—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø—Ä—è–º–æ–∫ —â–µ —Ä–∞–∑ ‚Äî –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏."})

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    elif msg in ["—Ç–∞–∫", "–¥–∞"] and "confirm" in last_session[session_id]:
        start, end = last_session[session_id]["confirm"]

    else:
        # –í–∏—Ç—è–≥—É—î–º–æ –¥–æ –¥–≤–æ—Ö –º—ñ—Å—Ç
        cities = extract_two_cities(msg)
        if len(cities) == 2:
            start, end = cities[0], cities[1]
            last_session[session_id]["confirm"] = (start, end)
            return jsonify({
                "reply": f"–í–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ –∑ {start.capitalize()} –¥–æ {end.capitalize()}?",
                "confirm": {"start": start, "end": end}
            })
        # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –ª–∏—à–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        elif len(cities) == 1:
            city = cities[0]
            # –í–∏–∑–Ω–∞—á–∏–º–æ, —á–∏ –≤–æ–Ω–æ –π–º–æ–≤—ñ—Ä–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            return jsonify({"reply": f"–ó —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ –¥–æ {city.capitalize()}?"})
        else:
            return jsonify({"reply": "–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏ —ñ –∑–≤—ñ–¥–∫–∏ ‚Äî –º–æ–∂–ª–∏–≤–æ, –∑ —É—Ç–æ—á–Ω–µ–Ω–Ω—è–º '–∑' –∞–±–æ '–¥–æ'."})

    # –®—É–∫–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç –ø–æ –∑—É–ø–∏–Ω–∫–∞—Ö
    route, all_points = find_route_by_stops(start, end)
    if route:
        idx_start = all_points.index(start)
        idx_end = all_points.index(end)
        price = extract_price(route, end) or "–£—Ç–æ—á–Ω—é–π—Ç–µ"
        link = route_link(route["start"], route["end"])
        reply = f"üöå <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {start.capitalize()} ‚Üí {end.capitalize()}\n"
        reply += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω\n"
        reply += f"‚è≥ <b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {route.get('duration', '‚Äî')}\n"
        if route.get("departure_times"):
            reply += f"‚è∞ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {route['departure_times'][0]}\n"
        if route.get("arrival_times"):
            reply += f"üïì <b>–ü—Ä–∏–±—É—Ç—Ç—è:</b> {route['arrival_times'][0]}\n"
        stops_path = all_points[idx_start+1:idx_end]
        if stops_path:
            reply += "üó∫Ô∏è <b>–ó—É–ø–∏–Ω–∫–∏ –ø–æ –¥–æ—Ä–æ–∑—ñ:</b> " + " ‚Üí ".join(stops_path) + "\n"
        reply += f"üîó <a href='{link}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ä—à—Ä—É—Ç</a>\nüìù <a href='{link}'>–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ</a>"
        return jsonify({"reply": reply, "html": True})

    return jsonify({"reply": "–ù–∞ –∂–∞–ª—å, –º–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –º—ñ—Å—Ç."})

@app.route("/")
def index():
    return "Bus-Timel Smart Dispatcher is running."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
