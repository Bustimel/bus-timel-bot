import os
import json
import re
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import requests
from thefuzz import fuzz

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
TELEGRAM_USER_ID = os.getenv("TELEGRAM_USER_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

with open("routes.json", "r", encoding="utf-8") as f:
    routes = json.load(f)

common_phrases = [
  "–ø—Ä–∏–≤—ñ—Ç", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–≤—ñ—Ç–∞—é", "—Ö–∞–π", "—è–∫ —Å–ø—Ä–∞–≤–∏", "–æ–∫", "–¥—è–∫—É—é", "–¥–æ–±—Ä–µ",
  "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–ø—Ä–∏–≤–µ—Ç", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–∫–∞–∫ –¥–µ–ª–∞", "—Å–ø–∞—Å–∏–±–æ", "–æ–∫–µ–π"
]

faq_keywords = {
  "—Ç–≤–∞—Ä–∏–Ω": "–¢–∞–∫, –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è —Ç–≤–∞—Ä–∏–Ω –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ —É –ø–µ—Ä–µ–Ω–æ—Å–∫–∞—Ö. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –≤–æ–¥—ñ—è –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å.",
  "–±–∞–≥–∞–∂": "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ 1 –≤–∞–ª—ñ–∑—É –¥–æ 20 –∫–≥ —Ç–∞ —Ä—É—á–Ω—É –ø–æ–∫–ª–∞–∂—É. –ó–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–∞–≥–∞–∂ ‚Äî —É—Ç–æ—á–Ω—é–π—Ç–µ —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.",
  "wifi": "–¢–∞–∫, —É –±—ñ–ª—å—à–æ—Å—Ç—ñ –Ω–∞—à–∏—Ö –∞–≤—Ç–æ–±—É—Å—ñ–≤ —î Wi-Fi.",
  "–æ–ø–ª–∞—Ç–∞": "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Å–∞–¥—Ü—ñ –∞–±–æ –ø—ñ—Å–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
  "–¥—ñ—Ç–∏": "–î—ñ—Ç–∏ –¥–æ 5 —Ä–æ–∫—ñ–≤ –º–æ–∂—É—Ç—å —ó—Ö–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –±–µ–∑ –æ–∫—Ä–µ–º–æ–≥–æ –º—ñ—Å—Ü—è.",
  "–ø–µ—Ä–µ—Ä–≤–∞": "–ê–≤—Ç–æ–±—É—Å –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –Ω–∞ 1-2 —Å–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ –ø–µ—Ä–µ—Ä–≤–∏ –ø—ñ–¥ —á–∞—Å –º–∞—Ä—à—Ä—É—Ç—É."
}

user_sessions = {}

def normalize(text):
    return re.sub(r'\s+', ' ', text.lower().replace("‚Äô", "'").replace("—ñ", "–∏").replace("'", "").strip())

def route_link(start, end):
    s = re.sub(r"[^a-z–∞-—è0-9]", "", normalize(start).replace(" ", "-"))
    e = re.sub(r"[^a-z–∞-—è0-9]", "", normalize(end).replace(" ", "-"))
    return f"https://bus-timel.com.ua/routes/{s}-{e}.html"

def is_friendly(text):
    return normalize(text) in [normalize(p) for p in common_phrases]

def find_best_route(message):
    max_score = 0
    best_route = None
    user_input = normalize(message)
    for route in routes:
        cities = [route["start"]] + [s["city"] for s in route.get("stops", [])] + [route["end"]]
        combo = " ".join(cities)
        score = fuzz.partial_ratio(normalize(combo), user_input)
        if score > max_score:
            max_score = score
            best_route = route
    return best_route if max_score > 65 else None

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    user_message = data.get("message", "")
    session_id = data.get("session_id", "default")

    if is_friendly(user_message):
        return jsonify({"reply": "–í—ñ—Ç–∞—é! –Ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä Bus-Timel. –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏."})

    for keyword, answer in faq_keywords.items():
        if keyword in user_message.lower():
            return jsonify({"reply": answer})

    found_route = find_best_route(user_message)

    if found_route:
        price = str(found_route.get("price", "")).strip().lower()
        reply = ""
        reply += f"üöå <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {found_route['start']} ‚Üí {found_route['end']}\n"
        if price and "—É—Ç–æ—á–Ω—é–π—Ç–µ" not in price and price.replace(" ", "").isdigit():
            reply += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω\n"
        else:
            reply += "üí∞ <b>–¶—ñ–Ω–∞:</b> –£—Ç–æ—á–Ω—é–π—Ç–µ –∑–∞ –Ω–æ–º–µ—Ä–æ–º +380753750000\n"
        reply += f"‚è≥ <b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {found_route.get('duration', '‚Äî')}\n"
        if found_route.get("departure_times"):
            reply += f"‚è∞ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {', '.join(found_route['departure_times'])}\n"
        if found_route.get("arrival_times"):
            reply += f"üïì <b>–ü—Ä–∏–±—É—Ç—Ç—è:</b> {', '.join(found_route['arrival_times'])}\n"
        if found_route.get("stops"):
            reply += "üó∫Ô∏è <b>–ó—É–ø–∏–Ω–∫–∏:</b> " + " ‚Üí ".join([s['city'] for s in found_route["stops"]]) + "\n"
        link = route_link(found_route['start'], found_route['end'])
        reply += f"\nüîó <a href='{link}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ä—à—Ä—É—Ç</a>"
        reply += f"\nüìù <a href='{link}'>–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ</a>"
        return jsonify({"reply": reply, "html": True})

    return jsonify({"reply": "–ù–µ –∑–Ω–∞–π—à–æ–≤ –º–∞—Ä—à—Ä—É—Ç. –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏."})

@app.route("/")
def index():
    return "Bus-Timel SUPERBOT is live."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
