import os
import json
import re
import smtplib
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
from email.mime.text import MIMEText
from thefuzz import process, fuzz
import logging
import openai

try:
    from city_forms import CITY_FORMS
except ImportError:
    logging.warning("–§–∞–π–ª city_forms.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ CITY_FORMS –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º—ñ—Å—Ç –º–æ–∂–µ –±—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω–∏–º.")
    CITY_FORMS = {}

app = Flask(__name__)
CORS(app, resources={r"/chat": {"origins": [
    "https://bus-timel.com.ua",
    "http://localhost:8080"
]}})

logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
sessions = {}

try:
    with open("routes.json", encoding="utf-8") as f:
        data = json.load(f)
        routes_data = data["routes"]
except FileNotFoundError:
    logging.error("‚ùå –§–∞–π–ª routes.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    routes_data = []
except json.JSONDecodeError as e:
    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è routes.json: {e}")
    routes_data = []
except Exception as e:
    logging.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
    routes_data = []

if not routes_data:
    logging.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë–æ—Ç –Ω–µ –∑–º–æ–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏.")

def normalize(text):
    if not isinstance(text, str):
        return ""
    return re.sub(r"[‚Äô']", "", text.lower()).strip()

def match_city(word_to_match):
    norm_word = normalize(word_to_match)
    if not norm_word:
        return None
    for base_form, forms_list in CITY_FORMS.items():
        if norm_word in [normalize(f) for f in forms_list]:
            return base_form
    all_base_city_forms = list(CITY_FORMS.keys())
    if not all_base_city_forms:
        return None
    result = process.extractOne(norm_word, all_base_city_forms, scorer=fuzz.WRatio, score_cutoff=80)
    return result[0] if result else None

def extract_cities_from_text_with_order_hint(text_norm_full_phrase):
    """
    –í–∏—Ç—è–≥—É—î –¥–æ –¥–≤–æ—Ö –º—ñ—Å—Ç, –Ω–∞–º–∞–≥–∞—é—á–∏—Å—å –≤—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ "–∑" / "–≤/–¥–æ/–Ω–∞".
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {"start": city1, "end": city2} –∞–±–æ {"single_city": city, "type": "destination/origin/unknown"}
    """
    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ "–∑ X –¥–æ/–≤/–Ω–∞ Y"
    # –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: [\w'-]+(?:\s+[\w'-]+)* –¥–æ–∑–≤–æ–ª—è—î –±–∞–≥–∞—Ç–æ—Å–ª—ñ–≤–Ω—ñ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç
    match_from_to = re.search(r"(?:–∑|–∏–∑)\s+([\w'-]+(?:\s+[\w'-]+)*)\s+(?:–¥–æ|–≤|–Ω–∞)\s+([\w'-]+(?:\s+[\w'-]+)*)", text_norm_full_phrase, re.IGNORECASE)
    if match_from_to:
        start_candidate_str = match_from_to.group(1).strip()
        end_candidate_str = match_from_to.group(2).strip()
        start_city = match_city(start_candidate_str)
        end_city = match_city(end_candidate_str)
        if start_city and end_city and start_city != end_city:
            return {"start": start_city, "end": end_city, "ordered": True}

    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ "–≤/–¥–æ/–Ω–∞ Y –∑ X"
    match_to_from = re.search(r"(?:–≤|–Ω–∞|–¥–æ)\s+([\w'-]+(?:\s+[\w'-]+)*)\s+(?:–∑|–∏–∑)\s+([\w'-]+(?:\s+[\w'-]+)*)", text_norm_full_phrase, re.IGNORECASE)
    if match_to_from:
        end_candidate_str = match_to_from.group(1).strip()
        start_candidate_str = match_to_from.group(2).strip()
        start_city = match_city(start_candidate_str)
        end_city = match_city(end_candidate_str)
        if start_city and end_city and start_city != end_city:
            return {"start": start_city, "end": end_city, "ordered": True}

    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á—ñ—Ç–∫–∏—Ö –ø–∞—Ä –∑ –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –ª–æ–≥—ñ–∫—É
    words = text_norm_full_phrase.split()
    found_cities_list = []
    for word in words: # –ü—Ä–æ—Å—Ç–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ —Å–ª–æ–≤–∞—Ö
        city = match_city(word)
        if city and city not in found_cities_list:
            found_cities_list.append(city)
    
    if len(found_cities_list) == 2:
        # –ü–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î, –º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è
        return {"start": found_cities_list[0], "end": found_cities_list[1], "ordered": False}
    elif len(found_cities_list) == 1:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–¥–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
        city_name = found_cities_list[0]
        if any(kw + city_name in text_norm_full_phrase for kw in ["–≤ ", "–Ω–∞ ", "–¥–æ "]):
            return {"single_city": city_name, "type": "destination"}
        elif any(kw + city_name in text_norm_full_phrase for kw in ["–∑ ", "–∏–∑ "]):
            return {"single_city": city_name, "type": "origin"}
        else: # –Ø–∫—â–æ –º—ñ—Å—Ç–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è –±–µ–∑ —è–≤–Ω–∏—Ö –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫—ñ–≤ –Ω–∞–ø—Ä—è–º–∫—É
            return {"single_city": city_name, "type": "unknown"}
            
    return None


def find_route_segments(user_start_city_norm, user_end_city_norm):
    found_segments = []
    for route_entry in routes_data:
        stops = route_entry.get("stops", [])
        if not stops:
            continue
        stop_cities_uk_norm = [normalize(s.get("city", {}).get("uk")) for s in stops]
        try:
            start_index_in_route = stop_cities_uk_norm.index(user_start_city_norm)
            end_index_in_route = stop_cities_uk_norm.index(user_end_city_norm)
            if start_index_in_route < end_index_in_route:
                departure_stop_info = stops[start_index_in_route]
                arrival_stop_info = stops[end_index_in_route]
                segment_detail = {
                    "route_name_uk": route_entry.get("route_name", {}).get("uk", "N/A"),
                    "price": route_entry.get("price", "—É—Ç–æ—á–Ω—é–π—Ç–µ"),
                    "frequency": route_entry.get("frequency", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"),
                    "url_slug": route_entry.get("url_slug"),
                    "departure_city_uk": departure_stop_info.get("city", {}).get("uk", user_start_city_norm.capitalize()),
                    "departure_time": departure_stop_info.get("time", "N/A"),
                    "departure_address_uk": departure_stop_info.get("address", {}).get("uk", ""),
                    "arrival_city_uk": arrival_stop_info.get("city", {}).get("uk", user_end_city_norm.capitalize()),
                    "arrival_time": arrival_stop_info.get("time", "N/A"),
                    "arrival_address_uk": arrival_stop_info.get("address", {}).get("uk", ""),
                    "original_route_data": route_entry
                }
                found_segments.append(segment_detail)
        except ValueError:
            continue
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –º–∞—Ä—à—Ä—É—Ç—É {route_entry.get('route_name', {}).get('uk', 'N/A')}: {e}")
            continue
    return found_segments

def send_email(name, phone, start, end, date_str=None, route_name_str=""):
    email_user = os.environ.get("EMAIL_USER")
    email_pass = os.environ.get("EMAIL_PASS")
    recipient_email = "bustimelll@gmail.com"
    if not email_user or not email_pass:
        logging.error("‚ùå Email credentials (EMAIL_USER, EMAIL_PASS) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ.")
        return False
    subject = f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É Bus-Timel: {start} - {end}"
    body = (f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n"
            f"–Ü–º‚Äô—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {start.capitalize()} ‚Üí {end.capitalize()}\n")
    if route_name_str:
        body += f"–ù–∞–∑–≤–∞ —Ä–µ–π—Å—É: {route_name_str}\n"
    body += f"–î–∞—Ç–∞: {date_str or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}"
    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = email_user
    msg["To"] = recipient_email
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(email_user, email_pass)
            server.send_message(msg)
        logging.info(f"‚úÖ Email –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏: {name}, {phone}, {start}-{end}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è Email: {e}")
        return False

def gpt_reply(prompt_text, session_id="default"):
    openai_api_key = os.environ.get("OPENAI_API_KEY")
    if not openai_api_key or openai_api_key == "GPT_KEY_HERE": # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        logging.error("‚ùå –ö–ª—é—á API OpenAI (OPENAI_API_KEY) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.")
        return "–ù–∞ –∂–∞–ª—å, —è –∑–∞—Ä–∞–∑ –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—Ä–æ–±–ª–µ–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. üôè"
    openai.api_key = openai_api_key
    messages_to_send = [
        {"role": "system", "content": "–¢–∏ –≤–≤—ñ—á–ª–∏–≤–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–∞—Å–∞–∂–∏—Ä—Å—å–∫–∏—Ö –ø–µ—Ä–µ–≤–µ–∑–µ–Ω—å –∫–æ–º–ø–∞–Ω—ñ—ó Bus-Timel. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —á—ñ—Ç–∫–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞–π –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç–∏ –∞–±–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫."},
        {"role": "user", "content": prompt_text}
    ]
    try:
        response = openai.ChatCompletion.create(model="gpt-4", messages=messages_to_send, max_tokens=200)
        reply_content = response.choices[0].message["content"]
        return reply_content
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ GPT: {e}")
        return "–ù–∞ –∂–∞–ª—å, –º—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ GPT –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑—É–≤–∞—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç —â–æ–¥–æ –º–∞—Ä—à—Ä—É—Ç—É."

@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_message = data.get("message", "").strip()
    # –í–ê–ñ–õ–ò–í–û: –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–∞—î –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –£–ù–Ü–ö–ê–õ–¨–ù–ò–ô session_id –¥–ª—è –∫–æ–∂–Ω–æ—ó –Ω–æ–≤–æ—ó —Ä–æ–∑–º–æ–≤–∏!
    session_id = data.get("session_id", f"default_session_{datetime.now().timestamp()}") 

    if not user_message:
        return jsonify({"reply": "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ—Å—å."})

    logging.info(f"[{session_id}] –û—Ç—Ä–∏–º–∞–Ω–æ: '{user_message}'")
    
    context = sessions.setdefault(session_id, {
        "greeted": False, "confirm_pending": None, 
        "booking_details": None, "partial_city": None, "chat_history": []
    })
    
    context["chat_history"].append({"role": "user", "content": user_message})
    user_message_norm = normalize(user_message)
    reply_text = ""

    # --- 1. –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤) ---
    if context.get("booking_details") and context["booking_details"].get("pending_contact_info"):
        match_contact = re.match(r"(.+?)\s*(\+?\d{10,13})$", user_message.strip())
        if match_contact:
            name, phone = match_contact.groups()
            name = name.strip()
            booking_info = context["booking_details"]
            email_sent = send_email(name, phone, booking_info["departure_city_uk"], booking_info["arrival_city_uk"], 
                                    date_str=booking_info.get("date_str", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"), 
                                    route_name_str=booking_info.get("route_name_uk", ""))
            if email_sent:
                reply_text = f"‚úÖ –î—è–∫—É—î–º–æ, {name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç {booking_info['departure_city_uk']} - {booking_info['arrival_city_uk']} –ø—Ä–∏–π–Ω—è—Ç–∞. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚òéÔ∏è"
                sessions[session_id] = {"greeted": True, "chat_history": context["chat_history"]} # –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É, –∑–∞–ª–∏—à–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
            else:
                reply_text = "–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É."
            context["chat_history"].append({"role": "assistant", "content": reply_text})
            sessions[session_id] = context # –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π context
            return jsonify({"reply": reply_text})
        else:
            reply_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –û–ª–µ–≥ +380123456789"
            context["chat_history"].append({"role": "assistant", "content": reply_text})
            sessions[session_id] = context
            return jsonify({"reply": reply_text})

    # --- 2. –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É ---
    if context.get("confirm_pending"):
        pending_data = context["confirm_pending"]
        pending_details = pending_data["details"]
        
        if user_message_norm in ["—Ç–∞–∫", "–¥–∞", "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", "–ø—ñ–¥—Ö–æ–¥–∏—Ç—å"]:
            context["booking_details"] = {**pending_details, "pending_contact_info": True}
            context["confirm_pending"] = None
            
            route_info_str = (
                f"üöå –ú–∞—Ä—à—Ä—É—Ç: {pending_details['departure_city_uk']} ‚Üí {pending_details['arrival_city_uk']} ({pending_details['route_name_uk']})\n"
                f"üí∞ –¶—ñ–Ω–∞: {pending_details['price']}{' –≥—Ä–Ω' if pending_details['price'] != '—É—Ç–æ—á–Ω—é–π—Ç–µ' else ''}\n"
                f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞: {pending_details['frequency']}\n"
                f"‚è∞ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {pending_details['departure_city_uk']} ({pending_details.get('departure_address_uk') or 'N/A'}): {pending_details['departure_time']}\n"
                f"üïì –ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {pending_details['arrival_city_uk']} ({pending_details.get('arrival_address_uk') or 'N/A'}): {pending_details['arrival_time']}\n"
            )
            if pending_details.get("url_slug"):
                 route_info_str += f"üîó https://bus-timel.com.ua/routes/{pending_details['url_slug']}.html\n"
            
            reply_text = f"{route_info_str}–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –û–ª–µ–≥ +380XXXXXXXXX)."
            context["chat_history"].append({"role": "assistant", "content": reply_text})
            sessions[session_id] = context
            return jsonify({"reply": reply_text})
        
        elif user_message_norm in ["–Ω—ñ", "–Ω–µ—Ç", "—Å–∫–∞—Å—É–≤–∞—Ç–∏", "—ñ–Ω—à–∏–π", "–Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"]:
            reply_text = "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç —ñ–Ω–∞–∫—à–µ, –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å —ñ–Ω—à—ñ –º—ñ—Å—Ç–∞."
            context["confirm_pending"] = None
            context["partial_city"] = None # –°–∫–∏–¥–∞—î–º–æ —Ç–∞–∫–æ–∂ —á–∞—Å—Ç–∫–æ–≤–µ –º—ñ—Å—Ç–æ
            context["chat_history"].append({"role": "assistant", "content": reply_text})
            sessions[session_id] = context
            return jsonify({"reply": reply_text})

        elif user_message_norm in ["–Ω–∞–≤–ø–∞–∫–∏", "–Ω–∞–æ–±–æ—Ä–æ—Ç", "–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π", "–≤ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É"] and pending_details:
            original_start = normalize(pending_details["departure_city_uk"])
            original_end = normalize(pending_details["arrival_city_uk"])
            
            # –ì–æ—Ç—É—î–º–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
            user_message = f"–∑ {original_end} –¥–æ {original_start}" # –¶–µ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–∏–∂—á–µ
            user_message_norm = normalize(user_message)
            context["confirm_pending"] = None
            context["partial_city"] = None 
            logging.info(f"[{session_id}] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–ø—Ä–æ—Å–∏–≤ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –Ω–∞–ø—Ä—è–º–æ–∫. –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç: {user_message}")
            # –î–∞–ª—ñ –∫–æ–¥ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å –æ–±—Ä–æ–±–∫—É –∑ –Ω–æ–≤–∏–º user_message_norm
        else:
            reply_text = f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç: {pending_details['departure_city_uk']} ‚Üí {pending_details['arrival_city_uk']} ({pending_details['route_name_uk']}), –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ {pending_details['departure_time']}. –ù–∞–ø–∏—à—ñ—Ç—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'."
            context["chat_history"].append({"role": "assistant", "content": reply_text})
            sessions[session_id] = context # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ö–æ—á–∞ –≤—ñ–Ω –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
            return jsonify({"reply": reply_text})

    # --- 3. Small talk —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ---
    small_talk_keywords = ["—è–∫ —Å–ø—Ä–∞–≤–∏", "–ø—Ä–∏–≤—ñ—Ç", "–¥—è–∫—É—é", "—Å–ø–∞—Å–∏–±—ñ", "–ø–æ–∫–∞", "–±—É–≤–∞–π", "—â–æ —Ç–∏", "—Ç–∏ —Ö—Ç–æ", "–±–æ—Ç", "–¥–∏—Å–ø–µ—Ç—á–µ—Ä", "—è–∫ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏"]
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –∑–∞–ø–∏—Ç –Ω–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, —è–∫–∏–π –º–∞—î –π—Ç–∏ –¥–æ GPT, —è–∫—â–æ –Ω–µ –≤ —Å—Ç–∞–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    is_route_related_request = extract_cities_from_text_with_order_hint(user_message_norm) or \
                               any(kw in user_message_norm for kw in ["–º–∞—Ä—à—Ä—É—Ç–∏ –∑", "—Ä–µ–π—Å–∏ –∑"])
                               
    if not is_route_related_request and any(keyword in user_message_norm for keyword in small_talk_keywords):
        reply_text = gpt_reply(user_message, session_id)
        context["chat_history"].append({"role": "assistant", "content": reply_text})
        sessions[session_id] = context
        return jsonify({"reply": reply_text})

    # --- 4. –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, —è–∫—â–æ —â–µ –Ω–µ –≤—ñ—Ç–∞–ª–∏—Å—è ---
    if not context.get("greeted"):
        reply_text = "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä Bus-Timel. –ù–∞–ø–∏—à—ñ—Ç—å, –∑–≤—ñ–¥–∫–∏, –∫—É–¥–∏ —Ç–∞ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º) –∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ üöå"
        context["greeted"] = True
        context["chat_history"].append({"role": "assistant", "content": reply_text})
        sessions[session_id] = context
        return jsonify({"reply": reply_text})
    
    # --- 5. –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –º–∞—Ä—à—Ä—É—Ç—ñ–≤ ---
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    extracted_proposal = extract_cities_from_text_with_order_hint(user_message_norm)
    logging.info(f"[{session_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç extract_route_proposal_from_text: {extracted_proposal}")

    if extracted_proposal and "start" in extracted_proposal and "end" in extracted_proposal:
        start_city_norm = extracted_proposal["start"]
        end_city_norm = extracted_proposal["end"]
        
        logging.info(f"[{session_id}] –®—É–∫–∞—é —Å–µ–≥–º–µ–Ω—Ç–∏ –¥–ª—è: {start_city_norm} -> {end_city_norm}")
        found_segments = find_route_segments(start_city_norm, end_city_norm)
        context["partial_city"] = None # –û—á–∏—â–∞—î–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥–±—É–≤—Å—è –ø–æ—à—É–∫ –ø–æ –ø–∞—Ä—ñ

        if found_segments:
            if len(found_segments) == 1:
                segment = found_segments[0]
                reply_text = (f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å: {segment['route_name_uk']}.\n"
                              f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {segment['departure_city_uk']} ({segment.get('departure_address_uk') or 'N/A'}) –æ {segment['departure_time']}.\n"
                              f"–ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {segment['arrival_city_uk']} ({segment.get('arrival_address_uk') or 'N/A'}) –æ {segment['arrival_time']}.\n"
                              f"–¶—ñ–Ω–∞: {segment['price']}{' –≥—Ä–Ω' if segment['price'] != '—É—Ç–æ—á–Ω—é–π—Ç–µ' else ''}. –ß–∞—Å—Ç–æ—Ç–∞: {segment['frequency']}.\n")
                if segment.get("url_slug"):
                     reply_text += f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://bus-timel.com.ua/routes/{segment['url_slug']}.html\n"
                reply_text += f"–ü—ñ–¥—Ö–æ–¥–∏—Ç—å —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç? (—Ç–∞–∫/–Ω—ñ)"
                context["confirm_pending"] = {"details": segment, "alternatives_count": len(found_segments)}
            else:
                reply_text = f"–ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()}:\n\n"
                for i, segment in enumerate(found_segments[:3]):
                    reply_text += (
                        f"{i+1}. –†–µ–π—Å: {segment['route_name_uk']}\n"
                        f"   –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {segment['departure_city_uk']} –æ {segment['departure_time']}\n"
                        f"   –ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {segment['arrival_city_uk']} –æ {segment['arrival_time']}\n"
                        f"   –¶—ñ–Ω–∞: {segment['price']}{' –≥—Ä–Ω' if segment['price'] != '—É—Ç–æ—á–Ω—é–π—Ç–µ' else ''}. –ß–∞—Å—Ç–æ—Ç–∞: {segment['frequency']}\n\n"
                    )
                if len(found_segments) > 3: reply_text += "... —Ç–∞ —ñ–Ω—à—ñ.\n"
                reply_text += "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—ñ–Ω—à–∏–π', —è–∫—â–æ –∂–æ–¥–µ–Ω –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å."
                context["confirm_pending"] = {"details": found_segments[0], "alternatives": found_segments, "current_index": 0, "is_list": True} # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –≤–∏–±–æ—Ä—É
        else:
            reply_text = f"–ù–∞ –∂–∞–ª—å, –ø—Ä—è–º–∏—Ö —Ä–µ–π—Å—ñ–≤ –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ GPT fallback, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            # gpt_prompt = f"–î–æ–ø–æ–º–æ–∂–∏ –∑–Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()}, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏, —â–æ –ø—Ä—è–º–∏—Ö —Ä–µ–π—Å—ñ–≤ –Ω–µ–º–∞—î."
            # reply_text += "\n" + gpt_reply(gpt_prompt, session_id)

    elif extracted_proposal and "single_city" in extracted_proposal:
        current_city_extracted = extracted_proposal["single_city"]
        city_type = extracted_proposal["type"] # "origin", "destination", or "unknown"

        if context.get("partial_city") and context["partial_city"] != current_city_extracted:
            # –Ñ –ø–µ—Ä—à–µ –º—ñ—Å—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ, —ñ –∑–∞—Ä–∞–∑ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥—Ä—É–≥–µ
            if city_type == "destination" or (city_type == "unknown" and context.get("partial_city_type") == "origin"):
                start_city_norm = context["partial_city"]
                end_city_norm = current_city_extracted
            elif city_type == "origin" or (city_type == "unknown" and context.get("partial_city_type") == "destination"):
                start_city_norm = current_city_extracted
                end_city_norm = context["partial_city"]
            else: # –ù–µ –≤–¥–∞–ª–æ—Å—è —á—ñ—Ç–∫–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–ø—Ä—è–º–æ–∫
                reply_text = f"–ú–∞—î–º–æ –º—ñ—Å—Ç–∞ {context['partial_city'].capitalize()} —Ç–∞ {current_city_extracted.capitalize()}. –£—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤—ñ–¥–∫–∏ –∫—É–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–∑ {context['partial_city'].capitalize()} –¥–æ {current_city_extracted.capitalize()}')."
                context["chat_history"].append({"role": "assistant", "content": reply_text})
                sessions[session_id] = context
                return jsonify({"reply": reply_text})

            logging.info(f"[{session_id}] –§–æ—Ä–º—É—é –ø–∞—Ä—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {start_city_norm} -> {end_city_norm}")
            found_segments = find_route_segments(start_city_norm, end_city_norm)
            context["partial_city"] = None # –û—á–∏—â–∞—î–º–æ
            context["partial_city_type"] = None
             # ... (–ª–æ–≥—ñ–∫–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ found_segments, –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ len(cities) == 2)
            if found_segments: # –ö–æ–ø—ñ–ø–∞—Å—Ç–∞ –∑ –±–ª–æ–∫—É len(cities) == 2
                if len(found_segments) == 1:
                    segment = found_segments[0]
                    reply_text = (f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å: {segment['route_name_uk']}.\n"
                                  f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {segment['departure_city_uk']} ({segment.get('departure_address_uk') or 'N/A'}) –æ {segment['departure_time']}.\n"
                                  f"–ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {segment['arrival_city_uk']} ({segment.get('arrival_address_uk') or 'N/A'}) –æ {segment['arrival_time']}.\n"
                                  f"–¶—ñ–Ω–∞: {segment['price']}{' –≥—Ä–Ω' if segment['price'] != '—É—Ç–æ—á–Ω—é–π—Ç–µ' else ''}. –ß–∞—Å—Ç–æ—Ç–∞: {segment['frequency']}.\n")
                    if segment.get("url_slug"):
                        reply_text += f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://bus-timel.com.ua/routes/{segment['url_slug']}.html\n"
                    reply_text += f"–ü—ñ–¥—Ö–æ–¥–∏—Ç—å —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç? (—Ç–∞–∫/–Ω—ñ)"
                    context["confirm_pending"] = {"details": segment, "alternatives_count": len(found_segments)}
                else:
                    reply_text = f"–ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()}:\n\n"
                    for i, segment in enumerate(found_segments[:3]): # –û–±–º–µ–∂–∏–º–æ –ø–æ–∫–∞–∑ –ø–µ—Ä—à–∏–º–∏ 3
                        reply_text += (
                            f"{i+1}. –†–µ–π—Å: {segment['route_name_uk']}\n"
                            f"   –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ {segment['departure_city_uk']} –æ {segment['departure_time']}\n"
                            f"   –ü—Ä–∏–±—É—Ç—Ç—è –¥–æ {segment['arrival_city_uk']} –æ {segment['arrival_time']}\n"
                            f"   –¶—ñ–Ω–∞: {segment['price']}{' –≥—Ä–Ω' if segment['price'] != '—É—Ç–æ—á–Ω—é–π—Ç–µ' else ''}. –ß–∞—Å—Ç–æ—Ç–∞: {segment['frequency']}\n\n"
                        )
                    if len(found_segments) > 3: reply_text += "... —Ç–∞ —ñ–Ω—à—ñ.\n"
                    reply_text += "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—ñ–Ω—à–∏–π', —è–∫—â–æ –∂–æ–¥–µ–Ω –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å."
                    context["confirm_pending"] = {"details": found_segments[0], "alternatives": found_segments, "current_index": 0, "is_list": True}
            else:
                reply_text = f"–ù–∞ –∂–∞–ª—å, –ø—Ä—è–º–∏—Ö —Ä–µ–π—Å—ñ–≤ –∑ {start_city_norm.capitalize()} –¥–æ {end_city_norm.capitalize()} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        else: # –ü–µ—Ä—à–µ –º—ñ—Å—Ç–æ –≤–∫–∞–∑–∞–Ω–æ, –∞–±–æ —Ç–µ —Å–∞–º–µ –º—ñ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è
            context["partial_city"] = current_city_extracted
            context["partial_city_type"] = city_type # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø (origin/destination/unknown)
            if city_type == "destination":
                reply_text = f"–î–æ–±—Ä–µ, —ó–¥–µ–º–æ –¥–æ {current_city_extracted.capitalize()}. –ê –∑–≤—ñ–¥–∫–∏?"
            elif city_type == "origin":
                reply_text = f"–î–æ–±—Ä–µ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ—Å—å –∑ {current_city_extracted.capitalize()}. –ö—É–¥–∏ –ø—Ä—è–º—É—î—Ç–µ?"
            else: # type "unknown"
                reply_text = f"–ó–Ω–∞–π—à–æ–≤ –º—ñ—Å—Ç–æ {current_city_extracted.capitalize()}. –¶–µ –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —á–∏ –ø—Ä–∏–±—É—Ç—Ç—è? –ê–±–æ –Ω–∞–∑–≤—ñ—Ç—å –¥—Ä—É–≥–µ –º—ñ—Å—Ç–æ."
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è "—Ä–µ–π—Å–∏ –∑ {–º—ñ—Å—Ç–æ}"
    elif any(kw in user_message_norm for kw in ["–º–∞—Ä—à—Ä—É—Ç–∏ –∑", "—Ä–µ–π—Å–∏ –∑"]):
        city_name_for_listing = None
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —ñ –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–µ —Å–ª–æ–≤–æ —è–∫ –º—ñ—Å—Ç–æ
        temp_msg = user_message_norm.replace("–º–∞—Ä—à—Ä—É—Ç–∏ –∑", "").replace("—Ä–µ–π—Å–∏ –∑","").strip()
        potential_city_name = temp_msg.split()[0] if temp_msg.split() else None
        if potential_city_name:
            city_name_for_listing = match_city(potential_city_name)
        
        if city_name_for_listing:
            departing_routes_info = []
            for r_data in routes_data:
                if r_data["stops"] and normalize(r_data["stops"][0]["city"]["uk"]) == city_name_for_listing:
                    destination_city_name = r_data["stops"][-1]["city"]["uk"]
                    price = r_data.get("price", "—Ü—ñ–Ω–∞?")
                    departure_time = r_data["stops"][0].get("time", "N/A")
                    departing_routes_info.append(f"‚Äì –î–æ {destination_city_name.capitalize()} –æ {departure_time} (—Ü—ñ–Ω–∞: {price}{' –≥—Ä–Ω' if price != '—Ü—ñ–Ω–∞?' else ''})")
            
            if departing_routes_info:
                reply_text = f"üìç –î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ {city_name_for_listing.capitalize()}:\n" + "\n".join(departing_routes_info[:5])
                if len(departing_routes_info) > 5:
                    reply_text += "\n... —Ç–∞ —ñ–Ω—à—ñ."
            else:
                reply_text = f"–ù–∞ –∂–∞–ª—å, –º–∞—Ä—à—Ä—É—Ç—ñ–≤, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ {city_name_for_listing.capitalize()}, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üôÅ"
        else:
            reply_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–ª—è —è–∫–æ–≥–æ —à—É–∫–∞—Ç–∏ —Ä–µ–π—Å–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '—Ä–µ–π—Å–∏ –∑ –ö–∏—ó–≤'"
        context["partial_city"] = None # –°–∫–∏–¥–∞—î–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –æ–∫—Ä–µ–º–∞ –∫–æ–º–∞–Ω–¥–∞

    else: # –ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –º—ñ—Å—Ç –∞–±–æ –≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
        if context.get("partial_city"):
            # –Ø–∫—â–æ —î —á–∞—Å—Ç–∫–æ–≤–µ –º—ñ—Å—Ç–æ, —ñ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î—Ç—å—Å—è —è–∫ –º—ñ—Å—Ç–æ - –º–æ–∂–ª–∏–≤–æ, —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è "–∫—É–¥–∏/–∑–≤—ñ–¥–∫–∏"
            # –ê–±–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É—î–º–æ GPT.
            logging.info(f"[{session_id}] –ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –¥—Ä—É–≥–µ –º—ñ—Å—Ç–æ, —î —á–∞—Å—Ç–∫–æ–≤–µ: {context['partial_city']}. –ó–∞–ø–∏—Ç –¥–æ GPT: '{user_message}'")
            reply_text = gpt_reply(user_message, session_id)
            # –ù–µ —Å–∫–∏–¥–∞—î–º–æ partial_city —Ç—É—Ç, —Ä–∞–ø—Ç–æ–º GPT –¥–æ–ø–æ–º–æ–∂–µ —É—Ç–æ—á–Ω–∏—Ç–∏
        else:
            logging.info(f"[{session_id}] –ù–µ–º–∞—î –º—ñ—Å—Ç, –Ω–µ–º–∞—î —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ. –ó–∞–ø–∏—Ç –¥–æ GPT: '{user_message}'")
            reply_text = gpt_reply(user_message, session_id)

    if not reply_text: # –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –ª–æ–≥—ñ–∫–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ (–º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ, –∞–ª–µ –ø—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
        reply_text = "–ü–µ—Ä–µ–ø—Ä–æ—à—É—é, —è –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –π–æ–≥–æ —ñ–Ω–∞–∫—à–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–ó –ö–∏—î–≤–∞ –¥–æ –õ—å–≤–æ–≤–∞' –∞–±–æ '—Ä–µ–π—Å–∏ –∑ –ü–æ–ª—Ç–∞–≤–∏'."

    context["chat_history"].append({"role": "assistant", "content": reply_text})
    sessions[session_id] = context
    
    logging.info(f"[{session_id}] –í—ñ–¥–ø–æ–≤—ñ–¥—å: {reply_text}")
    return jsonify({"reply": reply_text})

@app.route("/")
def index():
    return "ü§ñ Bus-Timel Dispatcher Bot ‚Äî online."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
