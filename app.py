import os
import json
import re
import sqlite3
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
from thefuzz import process, fuzz
import logging

app = Flask(__name__)
CORS(app, resources={r"/chat": {"origins": "https://bus-timel.com.ua"}})

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename='bot.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLite –¥–ª—è –∑–∞—è–≤–æ–∫
conn = sqlite3.connect('bookings.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS bookings 
                 (id INTEGER PRIMARY KEY, session_id TEXT, name TEXT, phone TEXT, 
                  start_city TEXT, end_city TEXT, date TEXT, created_at TEXT)''')
conn.commit()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —ñ–∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
try:
    with open("routes.json", "r", encoding="utf-8") as f:
        routes = json.load(f)
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ routes.json
    for route in routes:
        if not all(key in route for key in ["start", "end", "duration"]):
            raise ValueError(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: {route}")
except Exception as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è routes.json: {e}")
    routes = []

# –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –º—ñ—Å—Ç (—Ç–æ–π —Å–∞–º–∏–π CITY_FORMS —ñ–∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É, —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
CITY_FORMS = {
    "–∫–∏—ó–≤": ["–∫–∏—ó–≤", "–∫–∏—ó–≤–∞", "–∫–∏—ó–≤–µ", "–∫–∏—ó–≤–æ–º", "–∫–∏—ó–≤—É"],
    "–ª—å–≤—ñ–≤": ["–ª—å–≤—ñ–≤", "–ª—å–≤—ñ–≤–∞", "–ª—å–≤—ñ–≤–µ", "–ª—å–≤—ñ–≤–æ–º", "–ª—å–≤—ñ–≤—É"],
    "–≤—ñ–Ω–Ω–∏—Ü—è": ["–≤—ñ–Ω–Ω–∏—Ü—é", "–≤—ñ–Ω–Ω–∏—Ü—è", "–≤—ñ–Ω–Ω–∏—Ü—ñ"],
    # ... —Ä–µ—à—Ç–∞ –º—ñ—Å—Ç —ñ–∑ —Ç–≤–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
}

city_aliases = {
    "–¥–Ω–µ–ø—Ä": "–¥–Ω—ñ–ø—Ä–æ", "—É–º–∞–Ω—å": "—É–º–∞–Ω—å", "–ª—å–≤–æ–≤": "–ª—å–≤—ñ–≤", "–≤–∏–Ω–Ω–∏—Ü–∞": "–≤—ñ–Ω–Ω–∏—Ü—è",
    "kiev": "–∫–∏—ó–≤", "lviv": "–ª—å–≤—ñ–≤", "odessa": "–æ–¥–µ—Å–∞"
}

def normalize(text):
    text = re.sub(r"[‚Äô']", "", text.lower()).strip()
    return re.sub(r"\s+", " ", text)

def match_city(word):
    norm = normalize(word)
    for base, forms in CITY_FORMS.items():
        if norm in forms:
            return base
    # Fuzzy-–ø–æ—à—É–∫ —ñ–∑ –Ω–∏–∂—á–∏–º –ø–æ—Ä–æ–≥–æ–º —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –∫—ñ–ª—å–∫–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
    results = process.extractBests(norm, list(CITY_FORMS.keys()), scorer=fuzz.token_sort_ratio, score_cutoff=70)
    return results[0][0] if results else None

def extract_cities_and_date(text):
    words = normalize(text).split()
    cities = []
    date = None
    time = None
    
    # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –π —á–∞—Å—É
    date_patterns = [r"(\d{1,2}[\./-]\d{1,2}(?:[\./-]\d{2,4})?)", r"(—Å—å–æ–≥–æ–¥–Ω—ñ|–∑–∞–≤—Ç—Ä–∞|–ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞)"]
    time_pattern = r"(\d{1,2}(?::\d{2})?\s*(?:–≥–æ–¥|—Ä–∞–Ω–∫—É|–≤–µ—á–æ—Ä–∞)?)"
    
    for word in words:
        if not date and any(re.match(p, word) for p in date_patterns):
            date = word
        elif not time and re.match(time_pattern, word):
            time = word
        else:
            city = match_city(word)
            if city and city not in cities:
                cities.append(city)
    
    return cities[:2], date, time

def route_link(start, end, date=None):
    url = f"https://bus-timel.com.ua/routes/{start.replace(' ', '-')}-{end.replace(' ', '-')}"
    if date:
        url += f"/{date}"
    return url

def find_real_route(start, end, date=None, time=None):
    matching_routes = []
    for route in routes:
        all_points = [route["start"]] + [s["city"] for s in route.get("stops", [])] + [route["end"]]
        if start in all_points and end in all_points and all_points.index(start) < all_points.index(end):
            if date or time:
                departure_times = route.get("departure_times", [])
                if time and not any(t.startswith(time.split()[0]) for t in departure_times):
                    continue
            matching_routes.append((route, all_points))
    return matching_routes[0] if matching_routes else (None, [])

def extract_price(route, end):
    if route["end"].lower() == end:
        return route.get("price", "–£—Ç–æ—á–Ω—é–π—Ç–µ")
    for s in route.get("stops", []):
        if s["city"].lower() == end and s.get("price", "").replace(" ", "").isdigit():
            return s["price"]
    return "–£—Ç–æ—á–Ω—é–π—Ç–µ"

@app.route("/chat", methods=["POST"])
def chat():
    try:
        data = request.json
        if not data or "message" not in data:
            return jsonify({"reply": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∑–∞–ø–∏—Ç."}), 400
        
        msg_raw = data.get("message", "")
        session_id = data.get("session_id", "default")
        msg = normalize(msg_raw)
        logging.info(f"Session {session_id}: {msg_raw}")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó –≤ SQLite
        cursor.execute("SELECT context FROM bookings WHERE session_id = ? ORDER BY created_at DESC LIMIT 1", (session_id,))
        session = cursor.fetchone()
        context = json.loads(session[0]) if session else {"greeted": False, "confirm": None, "booking": None}

        if not context["greeted"]:
            context["greeted"] = True
            cursor.execute("INSERT INTO bookings (session_id, context, created_at) VALUES (?, ?, ?)",
                         (session_id, json.dumps(context), datetime.now().isoformat()))
            conn.commit()
            return jsonify({"reply": "–í—ñ—Ç–∞—é! –Ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä Bus-Timel. –ù–∞–ø–∏—à—ñ—Ç—å, –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏."})

        # –û–±—Ä–æ–±–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        if context.get("booking"):
            if msg.lower() in ["—Ç–∞–∫", "–¥–∞"]:
                name_phone = context["booking"].get("pending_data", {})
                if name_phone:
                    cursor.execute("""INSERT INTO bookings (session_id, name, phone, start_city, end_city, date, created_at)
                                  VALUES (?, ?, ?, ?, ?, ?, ?)""",
                                 (session_id, name_phone.get("name"), name_phone.get("phone"),
                                  context["booking"]["start"], context["booking"]["end"],
                                  context["booking"].get("date"), datetime.now().isoformat()))
                    conn.commit()
                    context["booking"] = None
                    cursor.execute("UPDATE bookings SET context = ? WHERE session_id = ?",
                                 (json.dumps(context), session_id))
                    conn.commit()
                    return jsonify({"reply": "–ó–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏."})
            else:
                context["booking"] = None
                cursor.execute("UPDATE bookings SET context = ? WHERE session_id = ?",
                             (json.dumps(context), session_id))
                conn.commit()
                return jsonify({"reply": "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å, –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏."})

        # –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
        if msg.lower() in ["—Ç–∞–∫", "–¥–∞"] and context["confirm"]:
            start, end, date, time = context["confirm"]
            context["confirm"] = None
            route, points = find_real_route(start, end, date, time)
            if route:
                i1 = points.index(start)
                i2 = points.index(end)
                price = extract_price(route, end)
                link = route_link(start, end, date)
                reply = f"üöå <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {start.capitalize()} ‚Üí {end.capitalize()}\n"
                reply += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω\n"
                reply += f"‚è≥ <b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {route.get('duration', '‚Äî')}\n"
                if route.get("departure_times"):
                    reply += f"‚è∞ <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {route['departure_times'][0]}\n"
                if route.get("arrival_times"):
                    reply += f"üïì <b>–ü—Ä–∏–±—É—Ç—Ç—è:</b> {route['arrival_times'][0]}\n"
                if i2 > i1 + 1:
                    reply += f"üó∫Ô∏è <b>–ó—É–ø–∏–Ω–∫–∏:</b> {' ‚Üí '.join(points[i1+1:i2])}\n"
                reply += f"üîó <a href='{link}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ä—à—Ä—É—Ç</a>\n"
                reply += "üìù –•–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏? –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω."
                context["booking"] = {"start": start, "end": end, "date": date}
                cursor.execute("UPDATE bookings SET context = ? WHERE session_id = ?",
                             (json.dumps(context), session_id))
                conn.commit()
                return jsonify({"reply": reply, "html": True})
            else:
                return jsonify({"reply": "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –£—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑."})

        if msg.lower() in ["–Ω—ñ", "–Ω–µ—Ç", "–Ω–∞–æ–±–æ—Ä–æ—Ç", "–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä—è–º–∫—É", "–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"] and context["confirm"]:
            s, e, d, t = context["confirm"]
            context["confirm"] = (e, s, d, t)
            cursor.execute("UPDATE bookings SET context = ? WHERE session_id = ?",
                         (json.dumps(context), session_id))
            conn.commit()
            return jsonify({"reply": f"–¢–æ–¥—ñ, –º–æ–∂–ª–∏–≤–æ, –∑ {e.capitalize()} –¥–æ {s.capitalize()}?",
                           "confirm": {"start": e, "end": s, "date": d, "time": t}})

        # –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        if context.get("booking") and context["booking"].get("pending"):
            name_phone = re.match(r"(.+?)\s*(\+?\d{10,12})$", msg)
            if name_phone:
                name, phone = name_phone.groups()
                context["booking"]["pending_data"] = {"name": name, "phone": phone}
                cursor.execute("UPDATE bookings SET context = ? WHERE session_id = ?",
                             (json.dumps(context), session_id))
                conn.commit()
                return jsonify({"reply": f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è {name} ({phone}): —Ç–∞–∫ —á–∏ –Ω—ñ?"})
            else:
                return jsonify({"reply": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º‚Äô—è +380123456789"})

        # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º—ñ—Å—Ç, –¥–∞—Ç–∏ –π —á–∞—Å—É
        cities, date, time = extract_cities_and_date(msg)
        if len(cities) == 2:
            context["confirm"] = (cities[0], cities[1], date, time)
            cursor.execute("UPDATE bookings SET context = ? WHERE session_id = ?",
                         (json.dumps(context), session_id))
            conn.commit()
            reply = f"–í–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ –∑ {cities[0].capitalize()} –¥–æ {cities[1].capitalize()}?"
            if date:
                reply += f" –î–∞—Ç–∞: {date}"
            if time:
                reply += f" –ß–∞—Å: {time}"
            return jsonify({"reply": reply, "confirm": {"start": cities[0], "end": cities[1], "date": date, "time": time}})
        elif len(cities) == 1:
            return jsonify({"reply": f"–ó —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ –¥–æ {cities[0].capitalize()}?"})
        else:
            # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            if "–≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏" in msg or "–≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã" in msg:
                city = next((match_city(word) for word in msg.split() if match_city(word)), None)
                if city:
                    reply = f"–î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –∑ {city.capitalize()}:\n"
                    for route in routes:
                        if route["start"].lower() == city:
                            link = route_link(route["start"], route["end"])
                            reply += f"- {route['end'].capitalize()} ({route.get('duration', '‚Äî')}, {route.get('price', '–£—Ç–æ—á–Ω—é–π—Ç–µ')} –≥—Ä–Ω) <a href='{link}'>–î–µ—Ç–∞–ª—ñ</a>\n"
                    return jsonify({"reply": reply, "html": True}) if reply != f"–î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –∑ {city.capitalize()}:\n" else jsonify({"reply": f"–ú–∞—Ä—à—Ä—É—Ç—ñ–≤ —ñ–∑ {city.capitalize()} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."})
            return jsonify({"reply": "–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑ —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ —ñ –∫—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏."})

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ /chat: {e}")
        return jsonify({"reply": "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."}), 500

@app.route("/suggest_cities", methods=["POST"])
def suggest_cities():
    try:
        data = request.json
        query = normalize(data.get("query", ""))
        if not query:
            return jsonify({"suggestions": []})
        
        suggestions = process.extractBests(query, list(CITY_FORMS.keys()), 
                                         scorer=fuzz.partial_ratio, score_cutoff=70, limit=5)
        return jsonify({"suggestions": [s[0].capitalize() for s in suggestions]})
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ /suggest_cities: {e}")
        return jsonify({"suggestions": []}), 500

@app.route("/")
def index():
    return "Bus-Timel Enhanced Bot"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
