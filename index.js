
const { Telegraf, session } = require('telegraf');
const fs = require('fs');
const stringSimilarity = require('string-similarity');

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

let routes = [];
try {
  const data = fs.readFileSync('./routes.json', 'utf8');
  routes = JSON.parse(data);
} catch (error) {
  console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É:", error);
}

// --- –ö–ê–ù–û–ù–Ü–ß–ù–ò–ô –°–ü–ò–°–û–ö –ú–Ü–°–¢ ---
const allCities = new Set();
routes.forEach(route => {
  if (route.start) allCities.add(route.start.toLowerCase());
  if (route.end) allCities.add(route.end.toLowerCase());
  if (route.stops) route.stops.forEach(stop => {
    if (stop.city) allCities.add(stop.city.toLowerCase());
  });
});
const canonicalCityList = [...allCities];

// --- –ü–û–†–Ü–ì–ò ---
const SIMILARITY_THRESHOLD = 0.6;
const CONFIDENT_THRESHOLD = 0.95;

// --- –ü–û–®–£–ö –°–•–û–ñ–ò–• –ú–Ü–°–¢ ---
function findBestCityMatch(input, cityList) {
  if (!input) return null;
  const normalized = input.toLowerCase().trim();
  const match = stringSimilarity.findBestMatch(normalized, cityList);
  return match.bestMatch && match.bestMatch.rating > 0
    ? { original: input, bestMatch: match.bestMatch.target, rating: match.bestMatch.rating }
    : null;
}

// --- –í–Ü–î–ü–û–í–Ü–î–Ü –ù–ê –ó–ê–ü–ò–¢ –ü–†–û –ë–ê–ì–ê–ñ ---
bot.action('baggage_restrictions', async ctx => {
  await ctx.replyWithMarkdown(`üö´ **–û–±–º–µ–∂–µ–Ω–Ω—è:**
–ù–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–∑–∏—Ç–∏ —Ä–µ—á—ñ, —â–æ –º–æ–∂—É—Ç—å –∑–∞–≤–∞–∂–∞—Ç–∏ —ñ–Ω—à–∏–º –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–±–µ–∑–ø–µ–∫—É.`);
  return ctx.answerCbQuery();
});
bot.action('baggage_excess', async ctx => {
  await ctx.replyWithMarkdown(`‚ûï **–ü–æ–Ω–∞–¥ –Ω–æ—Ä–º—É:**
–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–∞–≥–∞–∂ –º–æ–∂–ª–∏–≤–∏–π –ª–∏—à–µ –∑–∞ –∑–≥–æ–¥–æ—é –≤–æ–¥—ñ—è.`);
  return ctx.answerCbQuery();
});
bot.action('baggage_liability', async ctx => {
  await ctx.replyWithMarkdown(`üõÖ **–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:**
–ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫ –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–≥–∞–∂—É.`);
  return ctx.answerCbQuery();
});
bot.action('baggage_inspection', async ctx => {
  await ctx.replyWithMarkdown(`üîç **–û–≥–ª—è–¥:**
–ü–µ—Ä—Å–æ–Ω–∞–ª –º–∞—î –ø—Ä–∞–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–º—ñ—Å—Ç –±–∞–≥–∞–∂—É –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏.`);
  return ctx.answerCbQuery();
});
bot.action('baggage_other_rules', async ctx => {
  await ctx.replyWithMarkdown(`üìé **–Ü–Ω—à–µ:**
–ë–∞–≥–∞–∂ –±–µ–∑ —Å—É–ø—Ä–æ–≤–æ–¥—É –ø–∞—Å–∞–∂–∏—Ä–∞ –Ω–µ –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å—Å—è. –ó–∞–±—É—Ç—ñ —Ä–µ—á—ñ ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.`);
  return ctx.answerCbQuery();
});

// --- –û–ë–†–û–ë–ö–ê –¢–ï–ö–°–¢–£ ---
bot.on('text', async ctx => {
  const msg = ctx.message.text.toLowerCase();

  // –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
  if (msg.includes('–ø—Ä–∏–≤—ñ—Ç') || msg.includes('–ø—Ä–∏–≤–µ—Ç')) {
    return ctx.reply('–í—ñ—Ç–∞—é! –ù–∞–ø–∏—à—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ –ø—Ä–∏–±—É—Ç—Ç—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–∑ –ö–∏—î–≤–∞ –¥–æ –õ—å–≤–æ–≤–∞".');
  }

  // –ó–∞–ø–∏—Ç –ø—Ä–æ –±–∞–≥–∞–∂
  if (msg.includes('–±–∞–≥–∞–∂') || msg.includes('—Å—É–º–∫–∏') || msg.includes('–≤–∞–ª—ñ–∑–∞') || msg.includes('—Ä–µ—á—ñ')) {
    return ctx.replyWithMarkdown(`üõÑ **–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –±–∞–≥–∞–∂—É:**
    
üëú –†—É—á–Ω–∞ –ø–æ–∫–ª–∞–∂–∞ ‚Äî 1 –º—ñ—Å—Ü–µ –¥–æ 7 –∫–≥ (40√ó20√ó60 —Å–º).
üß≥ –ë–∞–≥–∞–∂ ‚Äî 1 –º—ñ—Å—Ü–µ –¥–æ 15 –∫–≥ (50√ó40√ó80 —Å–º).
  
–û–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ:`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üö´ –ó–∞–±–æ—Ä–æ–Ω–∏", callback_data: "baggage_restrictions" }],
          [{ text: "‚ûï –ü–æ–Ω–∞–¥ –Ω–æ—Ä–º—É", callback_data: "baggage_excess" }],
          [{ text: "üõÖ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å", callback_data: "baggage_liability" }],
          [{ text: "üîç –û–≥–ª—è–¥", callback_data: "baggage_inspection" }],
          [{ text: "üìé –Ü–Ω—à–µ", callback_data: "baggage_other_rules" }]
        ]
      }
    });
  }

  // (–Ü–Ω—à—ñ –ª–æ–≥—ñ–∫–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ñ —Ç—É—Ç...)
  return ctx.reply('–í–∏–±–∞—á, –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∑–∞–ø–∏—Ç. –ù–∞–ø–∏—à–∏, –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ —Ö–æ—á–µ—à —ó—Ö–∞—Ç–∏.');
});

bot.launch();
console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.");
